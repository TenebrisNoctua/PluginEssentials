{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#peTitle","title":"Create Plugins Easily.","text":"<p>     Plugin Essentials allow you to create your plugins with Fusion easier than ever before.     Use pre-made components with an easy-to-use API to build plugins consistent with Roblox Studio's design. </p> Getting Started Download"},{"location":"api-reference/","title":"API Reference","text":"<p>Welcome to the API Reference section of Plugin Essentials!  This section is more technical, and is not recommended for beginners. Check out the tutorials for a guided experience!</p> <p>You can use the left bar to find the API members grouped by their category. Additionally, you can use the search bar to find a specific API member.</p>"},{"location":"api-reference/setFusion/","title":"setFusion :void","text":"<p><pre><code>function PluginEssentials.setFusion(fusion: Fusion): ()\n</code></pre> Sets the reference for the Fusion library that will be used to create the components.</p> <p>Warning</p> <p>Setting the Fusion version to a higher or a lower version than the intended version (0.3) may cause bugs.</p>"},{"location":"api-reference/setFusion/#default-syntax","title":"Default Syntax","text":"<pre><code>local PluginEssentials = require(...pluginessentials)\nPluginEssentials.setFusion(fusionModuleLocation)\n</code></pre>"},{"location":"api-reference/setFusion/#parameters","title":"Parameters","text":"<p> fusion: Fusion The <code>Fusion</code> library that will be used. </p>"},{"location":"api-reference/setFusion/#returns","title":"Returns","text":"<p> void"},{"location":"api-reference/plugin-components/members/Toolbar/","title":"Toolbar :function","text":"<p><pre><code>function Toolbar(Scope: Scope): (props: ToolbarProperties) -&gt; PluginToolbar\n</code></pre> Initializes the component and returns a new function to create that component, which is an object used to create PluginToolbarButtons.</p>"},{"location":"api-reference/plugin-components/members/Toolbar/#default-syntax","title":"Default Syntax","text":"<pre><code>local ToolbarComponent = require(PluginComponents.Toolbar)\nlocal Toolbar = ToolbarComponent(Scope)\n</code></pre>"},{"location":"api-reference/plugin-components/members/Toolbar/#shorthand","title":"Shorthand","text":"<pre><code>local Toolbar = require(PluginComponents.Toolbar)(Scope)\n</code></pre>"},{"location":"api-reference/plugin-components/members/Toolbar/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/plugin-components/members/Toolbar/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: ToolbarProperties The table which contains the properties of the component that will be created. PluginToolbar"},{"location":"api-reference/plugin-components/members/ToolbarButton/","title":"ToolbarButton :function","text":"<p><pre><code>function ToolbarButton(Scope: Scope): (props: ToolbarButtonProperties) -&gt; PluginToolbarButton\n</code></pre> Initializes the component and returns a new function to create that component, which is an object that allows the user to initiate a single, one-off action in Roblox Studio through the Click event.</p>"},{"location":"api-reference/plugin-components/members/ToolbarButton/#default-syntax","title":"Default Syntax","text":"<pre><code>local ToolbarButtonComponent = require(PluginComponents.ToolbarButton)\nlocal ToolbarButton = ToolbarButtonComponent(Scope)\n</code></pre>"},{"location":"api-reference/plugin-components/members/ToolbarButton/#shorthand","title":"Shorthand","text":"<pre><code>local ToolbarButton = require(PluginComponents.ToolbarButton)(Scope)\n</code></pre>"},{"location":"api-reference/plugin-components/members/ToolbarButton/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/plugin-components/members/ToolbarButton/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: ToolbarButtonProperties The table which contains the properties of the component that will be created. PluginToolbarButton"},{"location":"api-reference/plugin-components/members/Widget/","title":"Widget :function","text":"<p><pre><code>function Widget(Scope: Scope): (props: WidgetProperties) -&gt; DockWidgetPluginGui\n</code></pre> Initializes the component and returns a new function to create that component, which is a PluginGui that displays its contents inside a dockable Roblox Studio window.</p>"},{"location":"api-reference/plugin-components/members/Widget/#default-syntax","title":"Default Syntax","text":"<pre><code>local WidgetComponent = require(PluginComponents.Widget)\nlocal Widget = WidgetComponent(Scope)\n</code></pre>"},{"location":"api-reference/plugin-components/members/Widget/#shorthand","title":"Shorthand","text":"<pre><code>local Widget = require(PluginComponents.Widget)(Scope)\n</code></pre>"},{"location":"api-reference/plugin-components/members/Widget/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/plugin-components/members/Widget/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: WidgetProperties The table which contains the properties of the component that will be created. DockWidgetPluginGui"},{"location":"api-reference/plugin-components/types/Toolbar/","title":"ToolbarProperties","text":"<pre><code>export type ToolbarProperties = {\n    Name: string,\n    [any]: any,\n}\n</code></pre> <p>The <code>ToolbarProperties</code> table that is given to the <code>Toolbar()</code> function that contains data about the desired <code>Toolbar</code>.</p>"},{"location":"api-reference/plugin-components/types/Toolbar/#properties","title":"Properties","text":""},{"location":"api-reference/plugin-components/types/Toolbar/#name-string","title":"Name              : string","text":"<p>The name of the <code>Toolbar</code>.</p>"},{"location":"api-reference/plugin-components/types/ToolbarButton/","title":"ToolbarButtonProperties","text":"<pre><code>export type ToolbarButtonProperties = {\n    Active: CanBeState&lt;boolean&gt;?,\n    Toolbar: PluginToolbar,\n    ToolTip: string,\n    Image: string,\n    Name: string,\n    [any]: any,\n}\n</code></pre> <p>The <code>ToolbarButtonProperties</code> table that is given to the <code>ToolbarButton()</code> function that contains data about the desired <code>ToolbarButton</code>.</p>"},{"location":"api-reference/plugin-components/types/ToolbarButton/#properties","title":"Properties","text":""},{"location":"api-reference/plugin-components/types/ToolbarButton/#name-string","title":"Name              : string","text":"<p>The name of the <code>ToolbarButton</code>.</p>"},{"location":"api-reference/plugin-components/types/ToolbarButton/#image-string","title":"Image              : string","text":"<p>The Image that will be on the <code>ToolbarButton</code>.</p>"},{"location":"api-reference/plugin-components/types/ToolbarButton/#tooltip-string","title":"Tooltip              : string","text":"<p>The tooltip that will appear when the user hovers over the <code>ToolbarButton</code>.</p>"},{"location":"api-reference/plugin-components/types/ToolbarButton/#toolbar-plugintoolbar","title":"Toolbar              : PluginToolbar","text":"<p>The toolbar that the <code>ToolbarButton</code> will be in.</p>"},{"location":"api-reference/plugin-components/types/ToolbarButton/#active-canbestateboolean","title":"Active              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether the <code>ToolbarButton</code> will be active or not. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/plugin-components/types/Widget/","title":"WidgetProperties","text":"<pre><code>export type WidgetProperties = {\n    Id: string,\n    Name: string,\n    InitialDockTo: string | Enum.InitialDockState,\n    InitialEnabled: boolean,\n    ForceInitialEnabled: boolean,\n    FloatingSize: Vector2,\n    MinimumSize: Vector2,\n    [any]: any,\n}\n</code></pre> <p>The <code>WidgetProperties</code> table that is given to the <code>Widget()</code> function that contains data about the desired <code>Widget</code>.</p>"},{"location":"api-reference/plugin-components/types/Widget/#properties","title":"Properties","text":""},{"location":"api-reference/plugin-components/types/Widget/#name-string","title":"Name              : string","text":"<p>The name of the <code>Widget</code>.</p>"},{"location":"api-reference/plugin-components/types/Widget/#id-string","title":"Id              : string","text":"<p>A unique and consistent identifier used to storing the <code>Widget</code>'s dock state and other internal details.</p>"},{"location":"api-reference/plugin-components/types/Widget/#initialdockto-string-enuminitialdockstate","title":"InitialDockTo              : string | Enum.InitialDockState","text":"<p>Describes the initial docking state of a <code>Widget</code>. Can either be a <code>string</code> or an Enum.</p>"},{"location":"api-reference/plugin-components/types/Widget/#initialenabled-boolean","title":"InitialEnabled              : boolean","text":"<p>The enabled state of the <code>Widget</code> if it does not have a saved state from a previous session.</p>"},{"location":"api-reference/plugin-components/types/Widget/#forceinitialenabled-boolean","title":"ForceInitialEnabled              : boolean","text":"<p>If true, will override any saved enabled state with the <code>InitialEnabled</code> value.</p>"},{"location":"api-reference/plugin-components/types/Widget/#floatingsize-vector2","title":"FloatingSize              : Vector2","text":"<p>The initial pixel width and height of the <code>Widget</code> when floating.</p>"},{"location":"api-reference/plugin-components/types/Widget/#minimumsize-vector2","title":"MinimumSize              : Vector2","text":"<p>The minimum pixel width and height of the <code>Widget</code>.</p>"},{"location":"api-reference/studio-components/members/Background/","title":"Background :function","text":"<p><pre><code>function Background(Scope: Scope): (props: BackgroundProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is a borderless Frame with a background color that matches the user's current theme.</p>"},{"location":"api-reference/studio-components/members/Background/#default-syntax","title":"Default Syntax","text":"<pre><code>local BackgroundComponent = require(StudioComponents.Background)\nlocal Background = BackgroundComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Background/#shorthand","title":"Shorthand","text":"<pre><code>local Background = require(StudioComponents.Background)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Background/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/Background/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: BackgroundProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/BoxBorder/","title":"BoxBorder :function","text":"<p><pre><code>function BoxBorder(Scope: Scope): (props: BoxBorderProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is a box border that is around the child components.</p>"},{"location":"api-reference/studio-components/members/BoxBorder/#default-syntax","title":"Default Syntax","text":"<pre><code>local BoxBorderComponent = require(StudioComponents.BoxBorder)\nlocal BoxBorder = BoxBorderComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/BoxBorder/#shorthand","title":"Shorthand","text":"<pre><code>local BoxBorder = require(StudioComponents.BoxBorder)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/BoxBorder/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/BoxBorder/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: BoxBorderProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/Checkbox/","title":"Checkbox :function","text":"<p><pre><code>function Checkbox(Scope: Scope): (props: CheckboxProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is a checkbox that reacts to different states like hover, checked, indeterminate, and disabled.</p>"},{"location":"api-reference/studio-components/members/Checkbox/#default-syntax","title":"Default Syntax","text":"<pre><code>local CheckboxComponent = require(StudioComponents.Checkbox)\nlocal Checkbox = CheckboxComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Checkbox/#shorthand","title":"Shorthand","text":"<pre><code>local Checkbox = require(StudioComponents.Checkbox)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Checkbox/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/Checkbox/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: CheckboxProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/ClassIcon/","title":"ClassIcon :function","text":"<p><pre><code>function ClassIcon(Scope: Scope): (props: ClassIconProperties) -&gt; ImageLabel\n</code></pre> Initializes the component and returns a new function to create that component, which is an image of a given ClassName from the user's installed Studio icon set.</p>"},{"location":"api-reference/studio-components/members/ClassIcon/#default-syntax","title":"Default Syntax","text":"<pre><code>local ClassIconComponent = require(StudioComponents.ClassIcon)\nlocal ClassIcon = ClassIconComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/ClassIcon/#shorthand","title":"Shorthand","text":"<pre><code>local ClassIcon = require(StudioComponents.ClassIcon)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/ClassIcon/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/ClassIcon/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: ClassIconProperties The table which contains the properties of the component that will be created. ImageLabel"},{"location":"api-reference/studio-components/members/ColorPicker/","title":"ColorPicker :function","text":"<p><pre><code>function ColorPicker(Scope: Scope): (props: ColorPickerProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is an HSV color picker that uses a value slider.</p>"},{"location":"api-reference/studio-components/members/ColorPicker/#default-syntax","title":"Default Syntax","text":"<pre><code>local ColorPickerComponent = require(StudioComponents.ColorPicker)\nlocal ColorPicker = ColorPickerComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/ColorPicker/#shorthand","title":"Shorthand","text":"<pre><code>local ColorPicker = require(StudioComponents.ColorPicker)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/ColorPicker/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/ColorPicker/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: ColorPickerProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/Label/","title":"Label :function","text":"<p><pre><code>function Label(Scope: Scope): (props: LabelProperties) -&gt; TextLabel\n</code></pre> Initializes the component and returns a new function to create that component, which is a simple text label following Studio style guidelines for body text.</p>"},{"location":"api-reference/studio-components/members/Label/#default-syntax","title":"Default Syntax","text":"<pre><code>local LabelComponent = require(StudioComponents.Label)\nlocal Label = LabelComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Label/#shorthand","title":"Shorthand","text":"<pre><code>local Label = require(StudioComponents.Label)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Label/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/Label/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: LabelProperties The table which contains the properties of the component that will be created. TextLabel"},{"location":"api-reference/studio-components/members/Loading/","title":"Loading :function","text":"<p><pre><code>function Loading(Scope: Scope): (props: LoadingProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is an animated component to display whilst something else loads.</p>"},{"location":"api-reference/studio-components/members/Loading/#default-syntax","title":"Default Syntax","text":"<pre><code>local LoadingComponent = require(StudioComponents.Loading)\nlocal Loading = LoadingComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Loading/#shorthand","title":"Shorthand","text":"<pre><code>local Loading = require(StudioComponents.Loading)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Loading/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/Loading/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: LoadingProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/ProgressBar/","title":"ProgressBar :function","text":"<p><pre><code>function ProgressBar(Scope: Scope): (props: ProgressProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is a bar that fills up with an accent color.</p>"},{"location":"api-reference/studio-components/members/ProgressBar/#default-syntax","title":"Default Syntax","text":"<pre><code>local ProgressBarComponent = require(StudioComponents.ProgressBar)\nlocal ProgressBar = ProgressBarComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/ProgressBar/#shorthand","title":"Shorthand","text":"<pre><code>local ProgressBar = require(StudioComponents.ProgressBar)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/ProgressBar/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/ProgressBar/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: ProgressProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/Shadow/","title":"Shadow :function","text":"<p><pre><code>function Shadow(Scope: Scope): (props: ShadowProperties) -&gt; ImageLabel\n</code></pre> Initializes the component and returns a new function to create that component, which is a subtle shadow positioned on the side of your choosing.</p>"},{"location":"api-reference/studio-components/members/Shadow/#default-syntax","title":"Default Syntax","text":"<pre><code>local ShadowComponent = require(StudioComponents.Shadow)\nlocal Shadow = ShadowComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Shadow/#shorthand","title":"Shorthand","text":"<pre><code>local Shadow = require(StudioComponents.Shadow)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Shadow/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/Shadow/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: ShadowProperties The table which contains the properties of the component that will be created. ImageLabel"},{"location":"api-reference/studio-components/members/Slider/","title":"Slider :function","text":"<p><pre><code>function Slider(Scope: Scope): (props: SliderProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is a slider that reacts to being dragged.</p>"},{"location":"api-reference/studio-components/members/Slider/#default-syntax","title":"Default Syntax","text":"<pre><code>local SliderComponent = require(StudioComponents.Slider)\nlocal Slider = SliderComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Slider/#shorthand","title":"Shorthand","text":"<pre><code>local Slider = require(StudioComponents.Slider)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Slider/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/Slider/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: SliderProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/Title/","title":"Title :function","text":"<p><pre><code>function Title(Scope: Scope): (props: LabelProperties) -&gt; TextLabel\n</code></pre> Initializes the component and returns a new function to create that component, which is a simple text label following Studio style guidelines for title text.</p>"},{"location":"api-reference/studio-components/members/Title/#default-syntax","title":"Default Syntax","text":"<pre><code>local TitleComponent = require(StudioComponents.Title)\nlocal Title = TitleComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Title/#shorthand","title":"Shorthand","text":"<pre><code>local Title = require(StudioComponents.Title)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/Title/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/Title/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: LabelProperties The table which contains the properties of the component that will be created. TextLabel"},{"location":"api-reference/studio-components/members/VerticalCollapsibleSection/","title":"VerticalCollapsibleSection :function","text":"<p><pre><code>function VerticalCollapsibleSection(Scope: Scope): (props: VerticalCollapsibleSectionProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is a frame that contains a header and a content frame. The content frame can be collapsed by clicking on the header.</p>"},{"location":"api-reference/studio-components/members/VerticalCollapsibleSection/#default-syntax","title":"Default Syntax","text":"<pre><code>local VerticalCollapsibleSectionComponent = require(StudioComponents.VerticalCollapsibleSection)\nlocal VerticalCollapsibleSection = VerticalCollapsibleSectionComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/VerticalCollapsibleSection/#shorthand","title":"Shorthand","text":"<pre><code>local VerticalCollapsibleSection = require(StudioComponents.VerticalCollapsibleSection)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/VerticalCollapsibleSection/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/VerticalCollapsibleSection/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: VerticalCollapsibleSectionProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/VerticalExpandingList/","title":"VerticalExpandingList :function","text":"<p><pre><code>function VerticalExpandingList(Scope: Scope): (props: VerticalExpandingListProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is a Frame that uses AutomaticSize for the Y axis and contains a UIListLayout.</p>"},{"location":"api-reference/studio-components/members/VerticalExpandingList/#default-syntax","title":"Default Syntax","text":"<pre><code>local VerticalExpandingListComponent = require(StudioComponents.VerticalExpandingList)\nlocal VerticalExpandingList = VerticalExpandingListComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/VerticalExpandingList/#shorthand","title":"Shorthand","text":"<pre><code>local VerticalExpandingList = require(StudioComponents.VerticalExpandingList)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/VerticalExpandingList/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/VerticalExpandingList/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: VerticalExpandingListProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/buttons/BaseButton/","title":"BaseButton :function","text":"<p><pre><code>function BaseButton(Scope: Scope): (props: BaseButtonProperties) -&gt; TextButton\n</code></pre> Initializes the component and returns a new function to create that component, which is a TextButton that reacts to different states like hover, press, and disabled.</p>"},{"location":"api-reference/studio-components/members/buttons/BaseButton/#default-syntax","title":"Default Syntax","text":"<pre><code>local ButtonComponent = require(StudioComponents.BaseButton)\nlocal BaseButton = ButtonComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/buttons/BaseButton/#shorthand","title":"Shorthand","text":"<pre><code>local BaseButton = require(StudioComponents.BaseButton)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/buttons/BaseButton/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/buttons/BaseButton/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: BaseButtonProperties The table which contains the properties of the component that will be created. TextButton"},{"location":"api-reference/studio-components/members/buttons/Button/","title":"Button :function","text":"<p><pre><code>function Button(Scope: Scope): (props: BaseButtonProperties) -&gt; TextButton\n</code></pre> Initializes the component and returns a new function to create that component, which is a BaseButton but with already customized properties.</p>"},{"location":"api-reference/studio-components/members/buttons/Button/#default-syntax","title":"Default Syntax","text":"<pre><code>local ButtonComponent = require(StudioComponents.Button)\nlocal Button = ButtonComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/buttons/Button/#shorthand","title":"Shorthand","text":"<pre><code>local Button = require(StudioComponents.Button)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/buttons/Button/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/buttons/Button/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: BaseButtonProperties The table which contains the properties of the component that will be created. TextButton"},{"location":"api-reference/studio-components/members/buttons/IconButton/","title":"IconButton :function","text":"<p><pre><code>function IconButton(Scope: Scope): (props: IconButtonProperties) -&gt; TextButton\n</code></pre> Initializes the component and returns a new function to create that component, which is a button with an image on it instead of text.</p>"},{"location":"api-reference/studio-components/members/buttons/IconButton/#default-syntax","title":"Default Syntax","text":"<pre><code>local ButtonComponent = require(StudioComponents.IconButton)\nlocal IconButton = ButtonComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/buttons/IconButton/#shorthand","title":"Shorthand","text":"<pre><code>local IconButton = require(StudioComponents.IconButton)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/buttons/IconButton/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/buttons/IconButton/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: IconButtonProperties The table which contains the properties of the component that will be created. TextButton"},{"location":"api-reference/studio-components/members/buttons/MainButton/","title":"MainButton :function","text":"<p><pre><code>function MainButton(Scope: Scope): (props: BaseButtonProperties) -&gt; TextButton\n</code></pre> Initializes the component and returns a new function to create that component, which is a BaseButton, but uses the style of a main button, which is usually a blue background color.</p>"},{"location":"api-reference/studio-components/members/buttons/MainButton/#default-syntax","title":"Default Syntax","text":"<pre><code>local ButtonComponent = require(StudioComponents.MainButton)\nlocal MainButton = ButtonComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/buttons/MainButton/#shorthand","title":"Shorthand","text":"<pre><code>local MainButton = require(StudioComponents.MainButton)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/buttons/MainButton/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/buttons/MainButton/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: BaseButtonProperties The table which contains the properties of the component that will be created. TextButton"},{"location":"api-reference/studio-components/members/dropdown/Dropdown/","title":"Dropdown :function","text":"<p><pre><code>function Dropdown(Scope: Scope): (props: DropdownProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is a button that shows the selected item and a list of items in a dropdown when clicking on it.</p>"},{"location":"api-reference/studio-components/members/dropdown/Dropdown/#default-syntax","title":"Default Syntax","text":"<pre><code>local DropdownComponent = require(StudioComponents.Dropdown)\nlocal Dropdown = DropdownComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/dropdown/Dropdown/#shorthand","title":"Shorthand","text":"<pre><code>local Dropdown = require(StudioComponents.Dropdown)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/dropdown/Dropdown/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/dropdown/Dropdown/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: DropdownProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/dropdown/DropdownItem/","title":"DropdownItem :function","text":"<p><pre><code>function DropdownItem(Scope: Scope): (props: DropdownItemProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is an item that can be selected in a Dropdown.</p>"},{"location":"api-reference/studio-components/members/dropdown/DropdownItem/#default-syntax","title":"Default Syntax","text":"<pre><code>local DropdownComponent = require(StudioComponents.DropdownItem)\nlocal DropdownItem = DropdownComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/dropdown/DropdownItem/#shorthand","title":"Shorthand","text":"<pre><code>local DropdownItem = require(StudioComponents.DropdownItem)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/dropdown/DropdownItem/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/dropdown/DropdownItem/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: DropdownItemProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/input/LimitedTextInput/","title":"LimitedTextInput :function","text":"<p><pre><code>function LimitedTextInput(Scope: Scope): (props: LimitedTextInputProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is a TextInput, but contains properties for limiting the length of input to the TextBox.</p>"},{"location":"api-reference/studio-components/members/input/LimitedTextInput/#default-syntax","title":"Default Syntax","text":"<pre><code>local LimitedTextInputComponent = require(StudioComponents.LimitedTextInput)\nlocal LimitedTextInput = LimitedTextInputComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/input/LimitedTextInput/#shorthand","title":"Shorthand","text":"<pre><code>local LimitedTextInput = require(StudioComponents.LimitedTextInput)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/input/LimitedTextInput/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/input/LimitedTextInput/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: LimitedTextInputProperties The table which contains the properties of the component that will be created. TextBox"},{"location":"api-reference/studio-components/members/input/TextInput/","title":"TextInput :function","text":"<p><pre><code>function TextInput(Scope: Scope): (props: TextInputProperties) -&gt; TextBox\n</code></pre> Initializes the component and returns a new function to create that component, which is a TextBox that reacts to states like hover, focus, and disabled.</p>"},{"location":"api-reference/studio-components/members/input/TextInput/#default-syntax","title":"Default Syntax","text":"<pre><code>local TextInputComponent = require(StudioComponents.TextInput)\nlocal TextInput = TextInputComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/input/TextInput/#shorthand","title":"Shorthand","text":"<pre><code>local TextInput = require(StudioComponents.TextInput)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/input/TextInput/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/input/TextInput/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: TextInputProperties The table which contains the properties of the component that will be created. TextBox"},{"location":"api-reference/studio-components/members/scrollframe/BaseScrollFrame/","title":"BaseScrollFrame :function","text":"<p><pre><code>function BaseScrollFrame(Scope: Scope): (props: BaseScrollFrameProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is a custom scrolling frame that uses Roblox's ScrollingFrame for input and padding.</p>"},{"location":"api-reference/studio-components/members/scrollframe/BaseScrollFrame/#default-syntax","title":"Default Syntax","text":"<pre><code>local ScrollFrameComponent = require(StudioComponents.BaseScrollFrame)\nlocal BaseScrollFrame = ScrollFrameComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/scrollframe/BaseScrollFrame/#shorthand","title":"Shorthand","text":"<pre><code>local BaseScrollFrame = require(StudioComponents.BaseScrollFrame)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/scrollframe/BaseScrollFrame/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/scrollframe/BaseScrollFrame/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: BaseScrollFrameProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/scrollframe/ScrollFrame/","title":"ScrollFrame :function","text":"<p><pre><code>function ScrollFrame(Scope: Scope): (props: ScrollFrameProperties) -&gt; Frame\n</code></pre> Initializes the component and returns a new function to create that component, which is a BaseScrollFrame, but has properties that will determine the CanvasSize for the BaseScrollFrame.</p>"},{"location":"api-reference/studio-components/members/scrollframe/ScrollFrame/#default-syntax","title":"Default Syntax","text":"<pre><code>local ScrollFrameComponent = require(StudioComponents.ScrollFrame)\nlocal ScrollFrame = ScrollFrameComponent(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/scrollframe/ScrollFrame/#shorthand","title":"Shorthand","text":"<pre><code>local ScrollFrame = require(StudioComponents.ScrollFrame)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/scrollframe/ScrollFrame/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the component will be initialized in. </p>"},{"location":"api-reference/studio-components/members/scrollframe/ScrollFrame/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: ScrollFrameProperties The table which contains the properties of the component that will be created. Frame"},{"location":"api-reference/studio-components/members/util/getDragInput/","title":"getDragInput :function","text":"<p><pre><code>function getDragInput(Scope: Scope): (props: DragInputProperties) -&gt; (Value&lt;Vector2&gt;, Computed&lt;Vector2&gt;, Value&lt;boolean&gt;)\n</code></pre> Initializes the utility component and returns a new function to create values from that component, which are used to get dragging input from a certain area on the screen.</p>"},{"location":"api-reference/studio-components/members/util/getDragInput/#default-syntax","title":"Default Syntax","text":"<pre><code>local getDragInputUtility = require(StudioComponents.Util.getDragInput)\nlocal getDragInput = getDragInputUtility(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/util/getDragInput/#shorthand","title":"Shorthand","text":"<pre><code>local getDragInput = require(StudioComponents.Util.getDragInput)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/util/getDragInput/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the utility function will be initialized in. </p>"},{"location":"api-reference/studio-components/members/util/getDragInput/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: DragInputProperties The table which contains the properties of the component that will be created. (Value&lt;Vector2&gt;, Computed&lt;Vector2&gt;, Value&lt;boolean&gt;)"},{"location":"api-reference/studio-components/members/util/getModifier/","title":"getModifier :function","text":"<p><pre><code>function getModifier(Scope: Scope): (props: ModifierInput) -&gt; Computed&lt;any&gt;\n</code></pre> Initializes the utility component and returns a new function to create a modifier state from that component, which is used to keep track of the changes that may occur in the <code>props</code> table's values. This is used to get a <code>StudioStyleGuideModifier</code> that changes depending on the given values within the <code>props</code> table.</p>"},{"location":"api-reference/studio-components/members/util/getModifier/#default-syntax","title":"Default Syntax","text":"<pre><code>local getModifierUtility = require(StudioComponents.Util.getModifier)\nlocal getModifier = getModifierUtility(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/util/getModifier/#shorthand","title":"Shorthand","text":"<pre><code>local getModifier = require(StudioComponents.Util.getModifier)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/util/getModifier/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the utility function will be initialized in. </p>"},{"location":"api-reference/studio-components/members/util/getModifier/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> props: ModifierInput The table which contains the properties of the component that will be created. Computed&lt;any&gt;"},{"location":"api-reference/studio-components/members/util/getMotionState/","title":"getMotionState :function","text":"<p><pre><code>function getMotionState(Scope: Scope): (goalState: State&lt;any&gt;, motionStateType: string, ...any) -&gt; CanBeState&lt;any&gt;\n</code></pre> Initializes the utility component and returns a new function to create a <code>State</code> from that component, which is used to easily create a motion from it. This provides an easy way of calling certain animations within Fusion, such as <code>Spring</code>.</p>"},{"location":"api-reference/studio-components/members/util/getMotionState/#default-syntax","title":"Default Syntax","text":"<pre><code>local getMotionStateUtility = require(StudioComponents.Util.getMotionState)\nlocal getMotionState = getMotionStateUtility(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/util/getMotionState/#shorthand","title":"Shorthand","text":"<pre><code>local getMotionState = require(StudioComponents.Util.getMotionState)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/util/getMotionState/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the utility function will be initialized in. </p>"},{"location":"api-reference/studio-components/members/util/getMotionState/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> goalState: State&lt;any&gt; The goal state to be reached. motionStateType: string The type of the motion function. Can either be \"Tween\" or \"Spring\". ...any The other arguments to be passed to the motion function. CanBeState&lt;any&gt;"},{"location":"api-reference/studio-components/members/util/getSelectedState/","title":"getSelectedState :function","text":"<p><pre><code>function getSelectedState(props: GetSelectedStateProperties): (use: Use, innerScope: Scope) -&gt; any\n</code></pre> This utility function is used to select an option from an options list. It returns a callback function generally meant to be used within <code>Computed</code>s. This function also keeps track of the given values, and if they change, re-calculates the result. </p>"},{"location":"api-reference/studio-components/members/util/getSelectedState/#default-syntax","title":"Default Syntax","text":"<pre><code>local getSelectedState = require(StudioComponents.Util.getSelectedState)\nlocal returnedFunction = Scope:Computed(getSelectedState(props))\n</code></pre>"},{"location":"api-reference/studio-components/members/util/getSelectedState/#parameters","title":"Parameters","text":"<p> props: GetSelectedStateProperties The table which contains the properties that will be used within the returned callback function. </p>"},{"location":"api-reference/studio-components/members/util/getSelectedState/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> use: Use The use function that will be given automatically. innerScope: Scope The inner scope that will be given automatically. any"},{"location":"api-reference/studio-components/members/util/getState/","title":"getState :function","text":"<pre><code>function getState(Scope: Scope): (inputValue: CanBeState&lt;any&gt;, defaultValue: CanBeState&lt;any&gt;, mustBeKind: string?) -&gt; CanBeState&lt;any&gt;\n</code></pre> <p>This utility function ensures that you get the correct Fusion object type at all costs.</p> <ul> <li>If the input type is a <code>State</code>, and the <code>mustBeKind</code> is also set to \"State\", then the <code>inputValue</code> will be returned.</li> <li>If the input type is a <code>State</code>, but the <code>mustBeKind</code> is set to something else, then the utility function will create a new object from the kind set in the <code>mustBeKind</code>, with the value from the <code>inputValue</code>, and return it.</li> <li>If both of these are false, but the <code>defaultValue</code> is a <code>State</code>, then the <code>defaultValue</code> will be returned.</li> <li>If all of the above are false, but the <code>defaultValue</code> still exists, then the utility function will create a new object from the kind either set in the <code>mustBeKind</code>, or the kind \"Value\" by default, with the value from the <code>defaultValue</code> and return it.</li> </ul>"},{"location":"api-reference/studio-components/members/util/getState/#default-syntax","title":"Default Syntax","text":"<pre><code>local getStateUtility = require(StudioComponents.Util.getState)\nlocal getState = getStateUtility(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/util/getState/#shorthand","title":"Shorthand","text":"<pre><code>local getState = require(StudioComponents.Util.getState)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/util/getState/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the utility function will be initialized in. </p>"},{"location":"api-reference/studio-components/members/util/getState/#returns-function","title":"Returns FunctionParametersReturns","text":"<p> inputValue: CanBeState&lt;any&gt; The input value to be checked. defaultValue: CanBeState&lt;any&gt; If the input value is not provided or not valid, then this value will be used. mustBeKind: string? This parameter ensures that the provided values must be a certain Fusion type. CanBeState&lt;any&gt;"},{"location":"api-reference/studio-components/members/util/themeProvider/","title":"themeProvider :themeProvider","text":"<p><pre><code>function themeProvider(Scope: Scope): themeProvider\n</code></pre> Initializes themeProvider and returns a table containing its methods and properties.</p>"},{"location":"api-reference/studio-components/members/util/themeProvider/#default-syntax","title":"Default Syntax","text":"<pre><code>local themeProviderUtility = require(StudioComponents.Util.themeProvider)\nlocal themeProvider = themeProviderUtility(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/util/themeProvider/#shorthand","title":"Shorthand","text":"<pre><code>local themeProvider = require(StudioComponents.themeProvider)(Scope)\n</code></pre>"},{"location":"api-reference/studio-components/members/util/themeProvider/#parameters","title":"Parameters","text":"<p> Scope: Scope The <code>Scope</code> the utility will be initialized in. </p>"},{"location":"api-reference/studio-components/members/util/themeProvider/#returns","title":"Returns","text":"<p> themeProvider"},{"location":"api-reference/studio-components/types/Background/","title":"BackgroundProperties","text":"<pre><code>export type BackgroundProperties = {\n    StudioStyleGuideColor: CanBeState&lt;Enum.StudioStyleGuideColor&gt;?,\n    StudioStyleGuideModifier: CanBeState&lt;Enum.StudioStyleGuideModifier&gt;?,\n    [any]: any,\n}\n</code></pre> <p>The <code>BackgroundProperties</code> table that is given to the <code>Background()</code> function that contains data about the desired <code>Background</code>.</p>"},{"location":"api-reference/studio-components/types/Background/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/Background/#studiostyleguidecolor-canbestateenumstudiostyleguidecolor","title":"StudioStyleGuideColor              : CanBeState&lt;Enum.StudioStyleGuideColor&gt;?","text":"<p>The <code>Enum.StudioStyleGuideColor</code> that will be used to calculate the color of the <code>Background</code>. Can either be a <code>State</code> containing the <code>Enum</code> or the <code>Enum</code>.</p>"},{"location":"api-reference/studio-components/types/Background/#studiostyleguidemodifier-canbestateenumstudiostyleguidemodifier","title":"StudioStyleGuideModifier              : CanBeState&lt;Enum.StudioStyleGuideModifier&gt;?","text":"<p>The <code>Enum.StudioStyleGuideModifier</code> that will be used to calculate the color of the <code>Background</code>. Can either be a <code>State</code> containing the <code>Enum</code> or the <code>Enum</code>.</p>"},{"location":"api-reference/studio-components/types/BoxBorder/","title":"BoxBorderProperties","text":"<pre><code>export type BoxBorderProperties = {\n    Color: CanBeState&lt;Color3&gt;?,\n    Thickness: CanBeState&lt;number&gt;?,\n    CornerRadius: CanBeState&lt;UDim&gt;?,\n    [FusionTypes.Child]: GuiObject,\n}\n</code></pre> <p>The <code>BoxBorderProperties</code> table that is given to the <code>BoxBorder()</code> function that contains data about the desired <code>BoxBorder</code>.</p>"},{"location":"api-reference/studio-components/types/BoxBorder/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/BoxBorder/#color-canbestatecolor3","title":"Color              : CanBeState&lt;Color3&gt;?","text":"<p>The color of the border. Can either be a <code>State</code> containing a <code>Color3</code> or a <code>Color3</code>.</p>"},{"location":"api-reference/studio-components/types/BoxBorder/#thickness-canbestatenumber","title":"Thickness              : CanBeState&lt;number&gt;?","text":"<p>The thickness of the border. Can either be a <code>State</code> containing a <code>number</code> or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/BoxBorder/#cornerradius-canbestateudim","title":"CornerRadius              : CanBeState&lt;UDim&gt;?","text":"<p>The radius of the border. Can either be a <code>State</code> containing an <code>UDim</code> or an <code>UDim</code>.</p>"},{"location":"api-reference/studio-components/types/Checkbox/","title":"CheckboxProperties","text":"<pre><code>export type CheckboxProperties = {\n    OnChange: ((newValue: boolean) -&gt; nil)?,\n    Alignment: CanBeState&lt;Enum.HorizontalAlignment&gt;?,\n    Enabled: CanBeState&lt;boolean&gt;?,\n    Text: CanBeState&lt;string&gt;?,\n    Value: CanBeValue&lt;boolean&gt;?,\n    [any]: any,\n}\n</code></pre> <p>The <code>CheckboxProperties</code> table that is given to the <code>Checkbox()</code> function that contains data about the desired <code>Checkbox</code>.</p>"},{"location":"api-reference/studio-components/types/Checkbox/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/Checkbox/#onchange-newvalue-boolean-nil","title":"OnChange              : ((newValue: boolean) -&gt; nil)?","text":"<p>The callback function that will be called when the <code>Checkbox</code>'s value changes.</p>"},{"location":"api-reference/studio-components/types/Checkbox/#alignment-canbestateenumhorizontalalignment","title":"Alignment              : CanBeState&lt;Enum.HorizontalAlignment&gt;?","text":"<p>Determines where the <code>Checkbox</code> will be aligned to. Can either be a <code>State</code> containing the <code>Enum</code> or the <code>Enum</code>.</p>"},{"location":"api-reference/studio-components/types/Checkbox/#enabled-canbestateboolean","title":"Enabled              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether the <code>Checkbox</code> will be enabled or not. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/Checkbox/#text-canbestatestring","title":"Text              : CanBeState&lt;string&gt;?","text":"<p>The text that will be visible alongside the <code>Checkbox</code>. Can either be a <code>State</code> containing a <code>string</code>, or a <code>string</code>.</p>"},{"location":"api-reference/studio-components/types/Checkbox/#value-canbevalueboolean","title":"Value              : CanBeValue&lt;boolean&gt;?,","text":"<p>The initial value of the <code>Checkbox</code>. If not set, then the <code>Checkbox</code> will be indeterminate. Can either be a <code>Value</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/ClassIcon/","title":"ClassIconProperties","text":"<pre><code>export type ClassIconProperties = {\n    ClassName: CanBeState&lt;string&gt;,\n    [any]: any,\n}\n</code></pre> <p>The <code>ClassIconProperties</code> table that is given to the <code>ClassIcon()</code> function that contains data about the desired <code>ClassIcon</code>.</p>"},{"location":"api-reference/studio-components/types/ClassIcon/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/ClassIcon/#classname-canbestatestring","title":"ClassName              : CanBeState&lt;string&gt;","text":"<p>The class name of the desired icon. Can either be a <code>State</code> containing a <code>string</code>, or a <code>string</code>.</p>"},{"location":"api-reference/studio-components/types/ColorPicker/","title":"ColorPickerProperties","text":"<pre><code>export type ColorPickerProperties = {\n    ListDisplayMode: CanBeState&lt;Enum.ListDisplayMode&gt;?,\n    Enabled: CanBeState&lt;boolean&gt;?,\n    OnChange: (newColor: Color3) -&gt; nil,\n    Value: CanBeValue&lt;Color3&gt;?,\n    Step: CanBeValue&lt;Vector2&gt;?,\n    [any]: any,\n}\n</code></pre> <p>The <code>ColorPickerProperties</code> table that is given to the <code>ColorPicker()</code> function that contains data about the desired <code>ColorPicker</code>.</p>"},{"location":"api-reference/studio-components/types/ColorPicker/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/ColorPicker/#listdisplaymode-canbestateenumlistdisplaymode","title":"ListDisplayMode              : CanBeState&lt;Enum.ListDisplayMode&gt;?","text":"<p>The display mode of the <code>ColorPicker</code>. Can either be a <code>State</code> containing the <code>Enum</code>, or the <code>Enum</code>.</p>"},{"location":"api-reference/studio-components/types/ColorPicker/#enabled-canbestateboolean","title":"Enabled              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether the <code>ColorPicker</code> will be enabled or not. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/ColorPicker/#onchange-newcolor-color3-nil","title":"OnChange              : (newColor: Color3) -&gt; nil","text":"<p>The callback function that will be called when the <code>ColorPicker</code>'s value changes.</p>"},{"location":"api-reference/studio-components/types/ColorPicker/#value-canbevaluecolor3","title":"Value              : CanBeValue&lt;Color3&gt;?,","text":"<p>The initial value of the <code>ColorPicker</code>. Can either be a <code>Value</code> containing a <code>Color3</code>, or a <code>Color3</code>.</p>"},{"location":"api-reference/studio-components/types/ColorPicker/#step-canbevaluevector2","title":"Step              : CanBeValue&lt;Vector2&gt;?,","text":"<p>Determines how much the drag will be set to the <code>ColorPicker</code>'s arrow. Can either be a <code>Value</code> containing a <code>Vector2</code>, or a <code>Vector2</code>.</p>"},{"location":"api-reference/studio-components/types/Label/","title":"LabelProperties","text":"<pre><code>export type LabelProperties = {\n    Enabled: CanBeState&lt;boolean&gt;?,\n    Text: CanBeState&lt;string&gt;?,\n    TextColor3: CanBeState&lt;Color3&gt;?,\n    TextColorStyle: CanBeState&lt;Enum.StudioStyleGuideColor&gt;?,\n    TextSize: CanBeState&lt;number&gt;?,\n    [any]: any,\n}\n</code></pre> <p>The <code>LabelProperties</code> table that is given to the <code>Label()</code> function that contains data about the desired <code>Label</code>.</p>"},{"location":"api-reference/studio-components/types/Label/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/Label/#enabled-canbestateboolean","title":"Enabled              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether the <code>Label</code> will be enabled or not. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/Label/#text-canbestatestring","title":"Text              : CanBeState&lt;string&gt;?","text":"<p>The text that will be displayed on the <code>Label</code>. Can either be a <code>State</code> containing a <code>string</code>, or a <code>string</code>.</p>"},{"location":"api-reference/studio-components/types/Label/#textcolor3-canbestatecolor3","title":"TextColor3              : CanBeState&lt;Color3&gt;?","text":"<p>The color of the text on the <code>Label</code>. Can either be a <code>State</code> containing a <code>Color3</code>, or a <code>Color3</code>. Setting this property is not recommended, as it will overwrite the default color defined by the theme of the Studio.</p>"},{"location":"api-reference/studio-components/types/Label/#textcolorstyle-canbestateenumstudiostyleguidecolor","title":"TextColorStyle              : CanBeState&lt;Enum.StudioStyleGuideColor&gt;?","text":"<p>Sets the color style of the text to the given <code>Enum</code> or a <code>State</code> containing that <code>Enum</code>. This property is recommended to use if you want to modify the color of the text while making it consistent with the theme of the Studio.</p>"},{"location":"api-reference/studio-components/types/Label/#textsize-canbestatenumber","title":"TextSize              : CanBeState&lt;number&gt;?","text":"<p>The size of the text that will be displayed on the <code>Label</code>. Can either be a <code>State</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/Loading/","title":"LoadingProperties","text":"<pre><code>export type LoadingProperties = {\n    Enabled: CanBeState&lt;boolean&gt;?,\n    [any]: any,\n}\n</code></pre> <p>The <code>LoadingProperties</code> table that is given to the <code>Loading()</code> function that contains data about the desired <code>Loading</code> component.</p>"},{"location":"api-reference/studio-components/types/Loading/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/Loading/#enabled-canbestateboolean","title":"Enabled              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether the <code>Loading</code> will be enabled or not. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/ProgressBar/","title":"ProgressProperties","text":"<pre><code>export type ProgressProperties = {\n    Progress: CanBeState&lt;number&gt;,\n    MaximumProgress: CanBeState&lt;number&gt;,\n    [any]: any,\n}\n</code></pre> <p>The <code>ProgressProperties</code> table that is given to the <code>ProgressBar()</code> function that contains data about the desired <code>ProgressBar</code>.</p>"},{"location":"api-reference/studio-components/types/ProgressBar/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/ProgressBar/#progress-canbestatenumber","title":"Progress              : CanBeState&lt;number&gt;","text":"<p>Sets the progress for the <code>ProgressBar</code>. Can either be a <code>State</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/ProgressBar/#maximumprogress-canbestatenumber","title":"MaximumProgress              : CanBeState&lt;number&gt;","text":"<p>Sets the maximum number that the <code>Progress</code> property can reach for the <code>ProgressBar</code>. Can either be a <code>State</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/Shadow/","title":"ShadowProperties","text":"<pre><code>export type ShadowProperties = {\n    Side: string,\n    Transparency: number?,\n    [any]: any,\n}\n</code></pre> <p>The <code>ShadowProperties</code> table that is given to the <code>Shadow()</code> function that contains data about the desired <code>Shadow</code> component.</p>"},{"location":"api-reference/studio-components/types/Shadow/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/Shadow/#side-string","title":"Side              : string","text":"<p>Sets the side in which the <code>Shadow</code> will be visible on. Can be set to <code>\"left\"</code>, <code>\"right\"</code>, <code>\"top\"</code>, or <code>\"bottom\"</code>.</p>"},{"location":"api-reference/studio-components/types/Shadow/#transparency-number","title":"Transparency              : number?","text":"<p>Sets the transparency of the <code>Shadow</code>.</p>"},{"location":"api-reference/studio-components/types/Slider/","title":"SliderProperties","text":"<pre><code>export type SliderProperties = {\n    HandleSize: CanBeState&lt;UDim2&gt;?,\n    Enabled: CanBeState&lt;boolean&gt;?,\n    OnChange: ((newValue: number) -&gt; nil)?,\n    Value: CanBeValue&lt;number&gt;?,\n    Min: CanBeState&lt;number&gt;,\n    Max: CanBeState&lt;number&gt;,\n    Step: CanBeState&lt;number&gt;,\n    [any]: any,\n}\n</code></pre> <p>The <code>SliderProperties</code> table that is given to the <code>Slider()</code> function that contains data about the desired <code>Slider</code>.</p>"},{"location":"api-reference/studio-components/types/Slider/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/Slider/#handlesize-canbestateudim2","title":"HandleSize              : CanBeState&lt;UDim2&gt;?","text":"<p>Sets the size of the handle on the <code>Slider</code>. Can either be a <code>State</code> containing an <code>UDim2</code>, or an <code>UDim2</code>.</p>"},{"location":"api-reference/studio-components/types/Slider/#enabled-canbestateboolean","title":"Enabled              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether the <code>Slider</code> will be enabled or not. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/Slider/#onchange-newvalue-number-nil","title":"OnChange              : ((newValue: number) -&gt; nil)?","text":"<p>The callback function that will be called when the <code>Slider</code>'s value changes.</p>"},{"location":"api-reference/studio-components/types/Slider/#value-canbevaluenumber","title":"Value              : CanBeValue&lt;number&gt;?","text":"<p>The initial value of the <code>Slider</code>. Can either be a <code>Value</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/Slider/#min-canbestatenumber","title":"Min              : CanBeState&lt;number&gt;","text":"<p>The minimum number that the handle can be moved to. Can either be a <code>State</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/Slider/#max-canbestatenumber","title":"Max              : CanBeState&lt;number&gt;","text":"<p>The maximum number that the handle can be moved to. Can either be a <code>State</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/Slider/#step-canbestatenumber","title":"Step              : CanBeState&lt;number&gt;,","text":"<p>Determines how much the drag will be set to the <code>Slider</code>'s handle. Can either be a <code>State</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/VerticalCollapsibleSection/","title":"VerticalCollapsibleSectionProperties","text":"<pre><code>export type VerticalCollapsibleSectionProperties = VerticalExpandingListProperties &amp; {\n    Text: CanBeState&lt;string&gt;?,\n    TextColor3: CanBeState&lt;Color3&gt;?,\n    Collapsed: CanBeValue&lt;boolean&gt;?,\n    [any]: any,\n}\n</code></pre> <p>The <code>VerticalCollapsibleSectionProperties</code> table that is given to the <code>VerticalCollapsibleSection()</code> function that contains data about the desired <code>VerticalCollapsibleSection</code> component.</p> <p>This type is also an extension of the <code>VerticalExpandingListProperties</code> type.</p>"},{"location":"api-reference/studio-components/types/VerticalCollapsibleSection/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/VerticalCollapsibleSection/#text-canbestatestring","title":"Text              : CanBeState&lt;string&gt;?","text":"<p>The text that will be displayed on the <code>VerticalCollapsibleSection</code>. Can either be a <code>State</code> containing a <code>string</code>, or a <code>string</code>.</p>"},{"location":"api-reference/studio-components/types/VerticalCollapsibleSection/#textcolor3-canbestatecolor3","title":"TextColor3              : CanBeState&lt;Color3&gt;?","text":"<p>The color of the text on the <code>VerticalCollapsibleSection</code>. Can either be a <code>State</code> containing a <code>Color3</code>, or a <code>Color3</code>. Setting this property is not recommended, as it will overwrite the default color defined by the theme of the Studio.</p>"},{"location":"api-reference/studio-components/types/VerticalCollapsibleSection/#collapsed-canbevalueboolean","title":"Collapsed              : CanBeValue&lt;boolean&gt;?","text":"<p>Sets whether or not the <code>VerticalCollapsibleSection</code> is collapsed. Can either be a <code>Value</code> containing a <code>number</code>, or a <code>number</code>.</p> This component name sure is long..."},{"location":"api-reference/studio-components/types/VerticalExpandingList/","title":"VerticalExpandingListProperties","text":"<pre><code>export type VerticalExpandingListProperties = {\n    Enabled: CanBeState&lt;boolean&gt;?,\n    Padding: CanBeState&lt;UDim&gt;?,\n    SizeX: CanBeState&lt;number&gt;?,\n    [any]: any,\n}\n</code></pre> <p>The <code>VerticalExpandingListProperties</code> table that is given to the <code>VerticalExpandingList()</code> function that contains data about the desired <code>VerticalExpandingList</code> component.</p>"},{"location":"api-reference/studio-components/types/VerticalExpandingList/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/VerticalExpandingList/#enabled-canbestateboolean","title":"Enabled              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether the <code>VerticalExpandingList</code> will be enabled or not. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/VerticalExpandingList/#padding-canbestateudim","title":"Padding              : CanBeState&lt;UDim&gt;?","text":"<p>The padding between instances inside the <code>VerticalExpandingList</code>. Can either be a <code>State</code> containing an <code>UDim</code>, or an <code>UDim</code>.</p>"},{"location":"api-reference/studio-components/types/VerticalExpandingList/#sizex-canbestatenumber","title":"SizeX              : CanBeState&lt;number&gt;?","text":"<p>This property sets the size of the <code>VerticalExpandingList</code> on the X axis (Scale). Can either be a <code>State</code> containing an <code>number</code>, or an <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/buttons/BaseButton/","title":"BaseButtonProperties","text":"<pre><code>export type BaseButtonProperties = {\n    Activated: (() -&gt; nil)?,\n    Enabled: CanBeState&lt;boolean&gt;?,\n    TextSize: CanBeValue&lt;number&gt;?,\n    TextColorStyle: CanBeState&lt;Enum.StudioStyleGuideColor&gt;?,\n    BackgroundColorStyle: CanBeState&lt;Enum.StudioStyleGuideColor&gt;?,\n    BorderColorStyle: CanBeState&lt;Enum.StudioStyleGuideColor&gt;?,\n    CornerRadius: CanBeState&lt;UDim&gt;?,\n    Timeout: CanBeValue&lt;number&gt;?,\n    [any]: any,\n}\n</code></pre> <p>The <code>BaseButtonProperties</code> table that is given to the <code>BaseButton()</code> function that contains data about the desired <code>BaseButton</code>.</p>"},{"location":"api-reference/studio-components/types/buttons/BaseButton/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/buttons/BaseButton/#activated-nil","title":"Activated              : (() -&gt; nil)?","text":"<p>The callback function that will be called when the <code>BaseButton</code> is activated.</p>"},{"location":"api-reference/studio-components/types/buttons/BaseButton/#enabled-canbestateboolean","title":"Enabled              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether the <code>BaseButton</code> will be enabled or not. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/buttons/BaseButton/#textsize-canbevaluenumber","title":"TextSize              : CanBeValue&lt;number&gt;?","text":"<p>The size of the text that will be displayed on the <code>BaseButton</code>. Can either be a <code>Value</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/buttons/BaseButton/#textcolorstyle-canbestateenumstudiostyleguidecolor","title":"TextColorStyle              : CanBeState&lt;Enum.StudioStyleGuideColor&gt;?","text":"<p>Sets the color style of the text to the given <code>Enum</code> or a <code>State</code> containing that <code>Enum</code>.</p>"},{"location":"api-reference/studio-components/types/buttons/BaseButton/#backgroundcolorstyle-canbestateenumstudiostyleguidecolor","title":"BackgroundColorStyle              : CanBeState&lt;Enum.StudioStyleGuideColor&gt;?","text":"<p>Sets the color style of the background to the given <code>Enum</code> or a <code>State</code> containing that <code>Enum</code>. </p>"},{"location":"api-reference/studio-components/types/buttons/BaseButton/#bordercolorstyle-canbestateenumstudiostyleguidecolor","title":"BorderColorStyle              : CanBeState&lt;Enum.StudioStyleGuideColor&gt;?","text":"<p>Sets the color style of the border to the given <code>Enum</code> or a <code>State</code> containing that <code>Enum</code>. </p>"},{"location":"api-reference/studio-components/types/buttons/BaseButton/#cornerradius-canbestateudim","title":"CornerRadius              : CanBeState&lt;UDim&gt;?","text":"<p>Sets the corner radius of the <code>BaseButton</code>. Can either be a <code>State</code> containing an <code>UDim</code>, or an <code>UDim</code>.</p>"},{"location":"api-reference/studio-components/types/buttons/BaseButton/#timeout-canbevaluenumber","title":"Timeout              : CanBeValue&lt;number&gt;?","text":"<p>This property determines if the <code>BaseButton</code> will be disabled for a certain period of time after it's been activated. Can either be a <code>Value</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/buttons/IconButton/","title":"IconButtonProperties","text":"<pre><code>export type IconButtonProperties = BaseButtonProperties &amp; {\n    ImageColorStyle: CanBeState&lt;Enum.StudioStyleGuideColor&gt;?,\n    ImageColorModifier: CanBeState&lt;Enum.StudioStyleGuideModifier&gt;?,\n    Icon: CanBeState&lt;string&gt;,\n    IconColor3: CanBeState&lt;Color3&gt;?,\n    TextSize: nil,\n    TextColorStyle: nil,\n    [any]: any,\n}\n</code></pre> <p>The <code>IconButtonProperties</code> table that is given to the <code>IconButton()</code> function that contains data about the desired <code>IconButton</code>.</p> <p>This type is also an extension of the <code>BaseButtonProperties</code> type.</p>"},{"location":"api-reference/studio-components/types/buttons/IconButton/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/buttons/IconButton/#imagecolorstyle-canbestateenumstudiostyleguidecolor","title":"ImageColorStyle              : CanBeState&lt;Enum.StudioStyleGuideColor&gt;?","text":"<p>Sets the color style of the image to the given <code>Enum</code> or a <code>State</code> containing that <code>Enum</code>.</p>"},{"location":"api-reference/studio-components/types/buttons/IconButton/#imagecolormodifier-canbestateenumstudiostyleguidemodifier","title":"ImageColorModifier              : CanBeState&lt;Enum.StudioStyleGuideModifier&gt;?","text":"<p>Sets the color style modifier of the image to the given <code>Enum</code> or a <code>State</code> containing that <code>Enum</code>.</p>"},{"location":"api-reference/studio-components/types/buttons/IconButton/#icon-canbestatestring","title":"Icon              : CanBeState&lt;string&gt;?","text":"<p>The image that will appear on the <code>IconButton</code>. Can either be a <code>State</code> containing a <code>string</code>, or a <code>string</code>. </p>"},{"location":"api-reference/studio-components/types/buttons/IconButton/#iconcolor3-canbestatecolor3","title":"IconColor3              : CanBeState&lt;Color3&gt;?","text":"<p>The color of the icon on the <code>IconButton</code>. Can either be a <code>State</code> containing a <code>Color3</code>, or a <code>Color3</code>. Setting this property is not recommended, as it will overwrite the default color defined by the theme of the Studio.</p>"},{"location":"api-reference/studio-components/types/dropdown/Dropdown/","title":"DropdownProperties","text":"<pre><code>export type DropdownProperties = {\n    Enabled: CanBeState&lt;boolean&gt;?,\n    Value: CanBeState&lt;any&gt;?,\n    Options: CanBeState&lt;{any}&gt;,\n    MaxVisibleItems: CanBeState&lt;number&gt;?,\n    HideDropdownWhenMouseLeaves: CanBeState&lt;boolean&gt;?,\n    OnSelected: (selectedOption: any) -&gt; nil,\n    [any]: any,\n}\n</code></pre> <p>The <code>DropdownProperties</code> table that is given to the <code>Dropdown()</code> function that contains data about the desired <code>Dropdown</code> component.</p>"},{"location":"api-reference/studio-components/types/dropdown/Dropdown/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/dropdown/Dropdown/#enabled-canbestateboolean","title":"Enabled              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether the <code>Dropdown</code> will be enabled or not. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/dropdown/Dropdown/#value-canbestateany","title":"Value              : CanBeState&lt;any&gt;?","text":"<p>The selected option value of the <code>Dropdown</code>. Can either be a <code>State</code> that contains anything, or just anything.</p>"},{"location":"api-reference/studio-components/types/dropdown/Dropdown/#options-canbestateany","title":"Options              : CanBeState&lt;{any}&gt;?","text":"<p>The options within the <code>Dropdown</code>. Can either be a <code>State</code> that contains a table with anything, or just a table with anything.</p> <ul> <li>If a value within this table is an <code>Instance</code>, or an <code>EnumItem</code>, then its name will be used as the option.</li> <li>If a value within this table is a table, and it has one of these properties: <code>Label</code>, <code>Name</code>, <code>Title</code>; then one of them will be used as the option.</li> <li>If a value within this table is a <code>string</code> or something that can be turned into a <code>string</code>, then that <code>string</code> will be used.</li> </ul> <p>The found options will then be turned into a <code>DropdownItem</code> component to be used within the <code>Dropdown</code>.</p>"},{"location":"api-reference/studio-components/types/dropdown/Dropdown/#maxvisibleitems-canbestatenumber","title":"MaxVisibleItems              : CanBeState&lt;number&gt;?","text":"<p>The maximum amount of items that will be visible in the <code>Dropdown</code>. Can either be a <code>State</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/dropdown/Dropdown/#hidedropdownwhenmouseleaves-canbestateboolean","title":"HideDropdownWhenMouseLeaves              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether or not the <code>Dropdown</code> will be hidden when the mouse leaves. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/dropdown/Dropdown/#onselected-selectedoption-any-nil","title":"OnSelected              : (selectedOption: any) -&gt; nil","text":"<p>The callback function that will be called when an option has been selected from the <code>Dropdown</code>.</p>"},{"location":"api-reference/studio-components/types/dropdown/DropdownItem/","title":"DropdownItemProperties","text":"<pre><code>export type DropdownItemProperties = {\n    OnSelected: (selectedOption: any) -&gt; nil,\n    Item: any,\n    Text: CanBeState&lt;string&gt;?,\n    ZIndex: CanBeState&lt;number&gt;?,\n    [any]: any,\n}\n</code></pre> <p>The <code>DropdownItemProperties</code> table that is given to the <code>DropdownItem()</code> function that contains data about the desired <code>DropdownItem</code>.</p>"},{"location":"api-reference/studio-components/types/dropdown/DropdownItem/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/dropdown/DropdownItem/#onselected-selectedoption-any-nil","title":"OnSelected              : (selectedOption: any) -&gt; nil","text":"<p>The callback function that will be called when the option has been selected.</p>"},{"location":"api-reference/studio-components/types/dropdown/DropdownItem/#item-any","title":"Item              : any","text":"<p>The item that will be used for setting the <code>Text</code> property of the <code>DropdownItem</code>.</p>"},{"location":"api-reference/studio-components/types/dropdown/DropdownItem/#text-canbestatestring","title":"Text              : CanBeState&lt;string&gt;?","text":"<p>Sets the <code>Text</code> property of the <code>DropdownItem</code>. Setting this property is not recommended, as if the <code>Item</code> property is set, then it may get overwritten.</p>"},{"location":"api-reference/studio-components/types/dropdown/DropdownItem/#zindex-canbestatenumber","title":"ZIndex              : CanBeState&lt;number&gt;?","text":"<p>Sets the <code>ZIndex</code> property of the <code>DropdownItem</code>.</p>"},{"location":"api-reference/studio-components/types/input/LimitedTextInput/","title":"LimitedTextInputProperties","text":"<pre><code>export type LimitedTextInputProperties = TextInputProperties &amp; {\n    GraphemeLimit: CanBeState&amp;lt;number&amp;gt;,\n    TextLimit: CanBeState&amp;lt;number&amp;gt;,\n}\n</code></pre> <p>The <code>LimitedTextInputProperties</code> table that is given to the <code>LimitedTextInput()</code> function that contains data about the desired <code>LimitedTextInput</code>.</p> <p>This type is also an extension of the <code>TextInputProperties</code> type.</p>"},{"location":"api-reference/studio-components/types/input/LimitedTextInput/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/input/LimitedTextInput/#graphemelimit-canbestatenumber","title":"GraphemeLimit              : CanBeState&lt;number&gt;","text":"<p>Sets the grapheme limit for the <code>LimitedTextInput</code>. Can either be a <code>State</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/input/LimitedTextInput/#textlimit-canbestatenumber","title":"TextLimit              : CanBeState&lt;number&gt;","text":"<p>Sets the text limit for the <code>LimitedTextInput</code>. Can either be a <code>State</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/input/TextInput/","title":"TextInputProperties","text":"<pre><code>export type TextInputProperties = {\n    Enabled: CanBeState&lt;boolean&gt;?,\n    Text: CanBeValue&lt;string&gt;?,\n    OnChange: (newText: string) -&gt; nil,\n    OnFocusLost: ((newText: string) -&gt; nil)?,\n    Filter: ((newText: string) -&gt; boolean)?,\n    [any]: any,\n}\n</code></pre> <p>The <code>TextInputProperties</code> table that is given to the <code>TextInput()</code> function that contains data about the desired <code>TextInput</code>.</p>"},{"location":"api-reference/studio-components/types/input/TextInput/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/input/TextInput/#enabled-canbestateboolean","title":"Enabled              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether the <code>TextInput</code> will be enabled or not. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/input/TextInput/#text-canbevaluestring","title":"Text              : CanBeValue&lt;string&gt;?,","text":"<p>The default text that will be displayed on the <code>TextInput</code>. Can either be a <code>Value</code> containing a <code>string</code>, or a <code>string</code>. This property can be changed by the end-user.</p>"},{"location":"api-reference/studio-components/types/input/TextInput/#onchange-newtext-string-nil","title":"OnChange              : (newText: string) -&gt; nil,","text":"<p>The callback function that will be called when the <code>Text</code> property changes.</p>"},{"location":"api-reference/studio-components/types/input/TextInput/#onfocuslost-newtext-string-nil","title":"OnFocusLost              : ((newText: string) -&gt; nil)?,","text":"<p>The callback function that will be called when the focus has been lost on the <code>TextInput</code>, when Enter has been pressed. If the <code>Filter</code> callback function has been set, then this function will only be called after <code>Filter</code> callback function returns <code>true</code>.</p>"},{"location":"api-reference/studio-components/types/input/TextInput/#filter-newtext-string-boolean","title":"Filter              : ((newText: string) -&gt; boolean)?,","text":"<p>The callback function that will be called when the focus has been lost on the <code>TextInput</code>, when Enter has been pressed. This function is called first if defined, and allows you to filter the incoming text on the <code>TextInput</code>.</p> <p>If this function returns <code>true</code>, then the text will be deemed filtered, and the <code>OnFocusLost</code> callback function will be called, if it exists. And the <code>Text</code> property of the <code>TextInput</code> will be set to the <code>newText</code>.</p> <p>If this function returns <code>false</code>, then the <code>Text</code> property will automatically be reverted to its previous state.</p>"},{"location":"api-reference/studio-components/types/scrollframe/BaseScrollFrame/","title":"BaseScrollFrameProperties","text":"<pre><code>export type BaseScrollFrameProperties = {\n    ScrollBarBorderMode: CanBeState&lt;Enum.BorderMode&gt;?,\n    CanvasSize: CanBeState&lt;UDim2&gt;?,\n    ScrollingEnabled: CanBeState&lt;boolean&gt;?,\n    ScrollBarThickness: CanBeState&lt;number&gt;?,\n    VerticalScrollBarPosition: CanBeState&lt;Enum.VerticalScrollBarPosition&gt;?,\n    VerticalScrollBarInset: CanBeState&lt;Enum.ScrollBarInset&gt;?,\n    CornerRadius: CanBeState&lt;UDim&gt;?,\n    [any]: any,\n}\n</code></pre> <p>The <code>BaseScrollFrameProperties</code> table that is given to the <code>BaseScrollFrame()</code> function that contains data about the desired <code>BaseScrollFrame</code>.</p>"},{"location":"api-reference/studio-components/types/scrollframe/BaseScrollFrame/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/scrollframe/BaseScrollFrame/#scrollbarbordermode-canbestateenumbordermode","title":"ScrollBarBorderMode              : CanBeState&lt;Enum.BorderMode&gt;?","text":"<p>Sets the border mode of the <code>BaseScrollFrame</code>. Can either be a <code>State</code> containing the <code>Enum</code>, or the <code>Enum</code>.</p>"},{"location":"api-reference/studio-components/types/scrollframe/BaseScrollFrame/#canvassize-canbestateudim2","title":"CanvasSize              : CanBeState&lt;UDim2&gt;?","text":"<p>Sets the canvas size of the <code>BaseScrollFrame</code>. Can either be a <code>State</code> containing an <code>UDim2</code>, or an <code>UDim2</code>.</p>"},{"location":"api-reference/studio-components/types/scrollframe/BaseScrollFrame/#scrollingenabled-canbestateboolean","title":"ScrollingEnabled              : CanBeState&lt;boolean&gt;?","text":"<p>Sets the whether or not the user can scroll within the <code>BaseScrollFrame</code>. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/scrollframe/BaseScrollFrame/#scrollbarthickness-canbestatenumber","title":"ScrollBarThickness              : CanBeState&lt;number&gt;?","text":"<p>Sets the thickness of the <code>ScrollBar</code> within the <code>BaseScrollFrame</code>. Can either be a <code>State</code> containing a <code>number</code>, or a <code>number</code>.</p>"},{"location":"api-reference/studio-components/types/scrollframe/BaseScrollFrame/#verticalscrollbarposition-canbestateenumverticalscrollbarposition","title":"VerticalScrollBarPosition              : CanBeState&lt;Enum.VerticalScrollBarPosition&gt;?","text":"<p>Sets the position of the <code>ScrollBar</code> within the <code>BaseScrollFrame</code>. Can either be a <code>State</code> containing the <code>Enum</code>, or the <code>Enum</code>.</p>"},{"location":"api-reference/studio-components/types/scrollframe/BaseScrollFrame/#verticalscrollbarinset-canbestateenumscrollbarinset","title":"VerticalScrollBarInset              : CanBeState&lt;Enum.ScrollBarInset&gt;?","text":"<p>Sets whether the canvas should be inset by the <code>ScrollBarThickness</code> for the respective <code>ScrollBar</code> within the <code>BaseScrollFrame</code>. Can either be a <code>State</code> containing the <code>Enum</code>, or the <code>Enum</code>.</p>"},{"location":"api-reference/studio-components/types/scrollframe/BaseScrollFrame/#cornerradius-canbestateudim","title":"CornerRadius              : CanBeState&lt;UDim&gt;?","text":"<p>Sets the canvas size of the <code>BaseScrollFrame</code>. Can either be a <code>State</code> containing an <code>UDim2</code>, or an <code>UDim2</code>.</p>"},{"location":"api-reference/studio-components/types/scrollframe/ScrollFrame/","title":"ScrollFrameProperties","text":"<pre><code>export type ScrollFrameProperties = BaseScrollFrameProperties &amp; {\n    CanvasScaleConstraint: CanBeState&lt;Enum.ScrollingDirection&gt;?,\n    UIPadding: UIPadding?,\n    UILayout: UILayout?,\n}\n</code></pre> <p>The <code>ScrollFrameProperties</code> table that is given to the <code>ScrollFrame()</code> function that contains data about the desired <code>ScrollFrame</code>.</p> <p>This type is also an extension of the <code>BaseScrollFrameProperties</code> type.</p>"},{"location":"api-reference/studio-components/types/scrollframe/ScrollFrame/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/scrollframe/ScrollFrame/#canvasscaleconstraint-canbestateenumscrollingdirection","title":"CanvasScaleConstraint              : CanBeState&lt;Enum.ScrollingDirection&gt;?","text":"<p>Constraints the <code>CanvasScale</code> property of the <code>ScrollFrame</code> by the set scrolling direction. Can either be a <code>State</code> containing the <code>Enum</code>, or the <code>Enum</code>.</p>"},{"location":"api-reference/studio-components/types/scrollframe/ScrollFrame/#uipadding-uipadding","title":"UIPadding              : UIPadding?","text":"<p>The <code>UIPadding</code> instance that will be applied to the <code>ScrollFrame</code>. </p>"},{"location":"api-reference/studio-components/types/scrollframe/ScrollFrame/#uilayout-uilayout","title":"UILayout              : UILayout?","text":"<p>The <code>UILayout</code> instance that will be applied to the <code>ScrollFrame</code>. </p>"},{"location":"api-reference/studio-components/types/util/getDragInput/","title":"DragInputProperties","text":"<pre><code>export type DragInputProperties = {\n    Instance: CanBeState&lt;GuiObject&gt;,\n    Enabled: CanBeState&lt;boolean&gt;?,\n    OnChange: ((newValue: Vector2) -&gt; Vector2?)?,\n    getUseFunction: () -&gt; Use?,\n    Value: CanBeValue&lt;Vector2&gt;,\n    Min: CanBeValue&lt;Vector2&gt;,\n    Max: CanBeValue&lt;Vector2&gt;,\n    Step: CanBeValue&lt;Vector2&gt;,\n}\n</code></pre> <p>The <code>DragInputProperties</code> table that is given to the <code>getDragInput()</code> function that contains data about the desired values from the utility function.</p>"},{"location":"api-reference/studio-components/types/util/getDragInput/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/util/getDragInput/#instance-canbestateguiobject","title":"Instance              : CanBeState&lt;GuiObject&gt;","text":"<p>The <code>Instance</code> the drag detection will be running on.</p>"},{"location":"api-reference/studio-components/types/util/getDragInput/#enabled-canbestateboolean","title":"Enabled              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether the drag input will be enabled or not. Can either be a <code>State</code> containing a <code>boolean</code>, or a <code>boolean</code>.</p>"},{"location":"api-reference/studio-components/types/util/getDragInput/#onchange-newvalue-vector2-vector2","title":"OnChange              : ((newValue: Vector2) -&gt; Vector2?)?","text":"<p>The callback function that will be called when the <code>Value</code> changes.</p>"},{"location":"api-reference/studio-components/types/util/getDragInput/#getusefunction-use","title":"getUseFunction              : () -&gt; Use?","text":"<p>Settings this property will cause the <code>State</code>, that the returned <code>Use</code> function is from, to depend on certain internal values while the drag is happening. So when these internal values change, the <code>State</code> which the <code>Use</code> function belongs to will re-run again.</p>"},{"location":"api-reference/studio-components/types/util/getDragInput/#value-canbevaluevector2","title":"Value              : CanBeValue&lt;Vector2&gt;","text":"<p>The initial value of the drag input. Can either be a <code>Value</code> containing a <code>Vector2</code>, or a <code>Vector2</code>.</p>"},{"location":"api-reference/studio-components/types/util/getDragInput/#min-canbevaluevector2","title":"Min              : CanBeValue&lt;Vector2&gt;","text":"<p>The minimum position that the drag can be started from.</p>"},{"location":"api-reference/studio-components/types/util/getDragInput/#max-canbevaluevector2","title":"Max              : CanBeValue&lt;Vector2&gt;","text":"<p>The maximum position that the drag can be started from.</p>"},{"location":"api-reference/studio-components/types/util/getDragInput/#step-canbevaluevector2","title":"Step              : CanBeValue&lt;Vector2&gt;","text":"<p>Determines how much the <code>Value</code> will change when drag is applied.</p>"},{"location":"api-reference/studio-components/types/util/getModifier/","title":"ModifierInput","text":"<pre><code>export type ModifierInput = {\n    Enabled: CanBeState&lt;boolean&gt;?,\n    Hovering: CanBeState&lt;boolean&gt;?,\n    Selected: CanBeState&lt;boolean&gt;?,\n    Pressed: CanBeState&lt;boolean&gt;?,\n    Otherwise: CanBeState&lt;Enum.StudioStyleGuideModifier&gt;?,\n}\n</code></pre> <p>The <code>ModifierInput</code> table that is given to the <code>getModifier()</code> function that contains data about the desired value from the utility function.</p>"},{"location":"api-reference/studio-components/types/util/getModifier/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/util/getModifier/#enabled-canbestateboolean","title":"Enabled              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether or not the component for the modifier is enabled.</p>"},{"location":"api-reference/studio-components/types/util/getModifier/#hovering-canbestateboolean","title":"Hovering              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether or not the component for the modifier is hovering.</p>"},{"location":"api-reference/studio-components/types/util/getModifier/#selected-canbestateboolean","title":"Selected              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether or not the component for the modifier is selected.</p>"},{"location":"api-reference/studio-components/types/util/getModifier/#pressed-canbestateboolean","title":"Pressed              : CanBeState&lt;boolean&gt;?","text":"<p>Sets whether or not the component for the modifier is pressed.</p>"},{"location":"api-reference/studio-components/types/util/getModifier/#otherwise-canbestateenumstudiostyleguidemodifier","title":"Otherwise              : CanBeState&lt;Enum.StudioStyleGuideModifier&gt;?","text":"<p>If none of the above properties are satisfied, then this property will be used. For example: * If the component is enabled, but not hovered, selected, or pressed.</p> <p>If this property is not set, then the default modifier will be applied.</p>"},{"location":"api-reference/studio-components/types/util/getSelectedState/","title":"getSelectedStateProperties","text":"<pre><code>export type GetSelectedStateProperties = {\n    Value: CanBeValue&lt;any&gt;?,\n    Options: CanBeState&lt;{any}&gt;?,\n    OnSelected: ((selectedOption: any, use: Use?) -&gt; nil)?,\n}\n</code></pre> <p>The <code>getSelectedStateProperties</code> table that is given to the <code>getSelectedState()</code> function that contains data about the desired value from the utility function.</p>"},{"location":"api-reference/studio-components/types/util/getSelectedState/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/util/getSelectedState/#value-canbevalueany","title":"Value              : CanBeValue&lt;any&gt;?","text":"<p>The selected option value from the component. Can either be a <code>Value</code> that contains anything, or just anything.</p>"},{"location":"api-reference/studio-components/types/util/getSelectedState/#options-canbestateany","title":"Options              : CanBeState&lt;{any}&gt;?","text":"<p>The options table from the component. Can either be a <code>State</code> that contains a table with anything, or just a table with anything.</p>"},{"location":"api-reference/studio-components/types/util/getSelectedState/#onselected-selectedoption-any-use-use-nil","title":"OnSelected              : ((selectedOption: any, use: Use?) -&gt; nil)?","text":"<p>The callback function that will be called when an option has been selected from the component.</p>"},{"location":"api-reference/studio-components/types/util/themeProvider/","title":"themeProvider","text":"<pre><code>export type themeProvider = {\n    Theme: Value&lt;string&gt;,\n    ThemeColors: {[Enum.StudioStyleGuideColor]: {[Enum.StudioStyleGuideModifier]: Value&lt;Color3&gt;}},\n    IsDark: Value&lt;boolean&gt;,\n    Scope: Scope,\n    ItemScope: Scope,\n    Fonts: {\n        Default: Enum.Font,\n        SemiBold: Enum.Font,\n        Bold: Enum.Font,\n        Black: Enum.Font,\n        Mono: Enum.Font,\n    },\n    GetColor: (self: themeProvider, styleGuideColor: CanBeValue&lt;Enum.StudioStyleGuideColor&gt;, styleGuideModifier: CanBeValue&lt;Enum.StudioStyleGuideModifier&gt;, force: boolean?) -&gt; Computed&lt;Color3&gt;,\n    GetFont: (self: themeProvider, fontName: CanBeState&lt;string&gt;) -&gt; Computed&lt;Enum.Font&gt;\n}\n</code></pre> <p>The type of the <code>themeProvider</code> table that is returned from the <code>themeProvider()</code> function that contains data about the returned <code>themeProvider</code> API.</p>"},{"location":"api-reference/studio-components/types/util/themeProvider/#properties","title":"Properties","text":""},{"location":"api-reference/studio-components/types/util/themeProvider/#theme-valuestring","title":"Theme              : Value&lt;string&gt;","text":"<p>The current theme that is set on the Studio. (Should only be read.)</p>"},{"location":"api-reference/studio-components/types/util/themeProvider/#themecolors-enumstudiostyleguidecolor-enumstudiostyleguidemodifier-valuecolor3","title":"ThemeColors              : {[Enum.StudioStyleGuideColor]: {[Enum.StudioStyleGuideModifier]: Value&lt;Color3&gt;}}","text":"<p>The theme colors used by the components within Plugin Essentials. Directly modifying this table is strongly not recommended, as this table stores all the <code>StudioStyleGuideColor</code>s and the <code>StudioStyleGuideModifier</code>s given by the components, and it will most likely cause bugs if overwritten.</p>"},{"location":"api-reference/studio-components/types/util/themeProvider/#isdark-valueboolean","title":"IsDark              : Value&lt;boolean&gt;","text":"<p>Indicates if the current Studio theme is dark. This is calculated through the background color of the current theme of the Studio.  (Should only be read.)</p>"},{"location":"api-reference/studio-components/types/util/themeProvider/#scope-scope","title":"Scope              : Scope","text":"<p>The <code>Scope</code> in which the Fusion objects will be created in the <code>themeProvider</code>. (Should only be read.)</p>"},{"location":"api-reference/studio-components/types/util/themeProvider/#itemscope-scope","title":"ItemScope              : Scope","text":"<p>The <code>Scope</code> in which the item objects will be created in the <code>themeProvider</code>. Directly modifying this table is strongly not recommended, as it is used only internally, so modifications to this table will cause bugs.</p>"},{"location":"api-reference/studio-components/types/util/themeProvider/#fonts-enumfont","title":"Fonts              : {...: Enum.Font}","text":"<p>The default fonts stored within the <code>themeProvider</code>. (Should only be read.)</p>"},{"location":"api-reference/studio-components/types/util/themeProvider/#getcolor-self-themeprovider-styleguidecolor-canbevalueenumstudiostyleguidecolor-styleguidemodifier-canbevalueenumstudiostyleguidemodifier-force-boolean-computedcolor3","title":"GetColor              : (self: themeProvider, styleGuideColor: CanBeValue&lt;Enum.StudioStyleGuideColor&gt;, styleGuideModifier: CanBeValue&lt;Enum.StudioStyleGuideModifier&gt;, force: boolean?) -&gt; Computed&lt;Color3&gt;","text":"<p>This function takes in a <code>StudioStyleGuideColor</code>, and a <code>StudioStyleGuideModifier</code>, and using these values, calculates a matching color. This color is returned within a <code>Computed</code>, so when the theme of the Studio updates, or when the <code>ThemeColors</code> table properties are updated, the colors are re-calculated. The colors will also be re-calculated, if the given values are <code>Value</code>s, when they are updated.</p>"},{"location":"api-reference/studio-components/types/util/themeProvider/#getfont-self-themeprovider-fontname-canbestatestring-computedenumfont","title":"GetFont              : (self: themeProvider, fontName: CanBeState&lt;string&gt;) -&gt; Computed&lt;Enum.Font&gt;","text":"<p>This function will return the matching <code>Font</code> from the <code>Fonts</code> table, with the given <code>fontName</code> parameter. This <code>Font</code> is returned within a <code>Computed</code>, so when the <code>fontName</code> parameter is updated, if it is a <code>State</code>, the <code>Font</code> to be returned will be re-calculated.</p>"},{"location":"tutorials/","title":"Getting Started","text":"<p>Welcome to the tutorial section of Plugin Essentials!  Here, you will learn what the requirements are, and how you can install the resource, as well as information about the libraries within it.</p>"},{"location":"tutorials/#requirements","title":"Requirements","text":"<p>To use Plugin Essentials, you need to install Fusion. Fusion is the UI library that the components within Plugin Essentials are built with. So you must install it inside your plugin.</p> <p>You can install Fusion wherever you want within your Plugin, Plugin Essentials will automatically find and use it.</p>"},{"location":"tutorials/#installation","title":"Installation","text":"<p>Installing Plugin Essentials is pretty easy! Just head over to this link to download the <code>.rbxm</code> file that contains the source code.</p> <p>After the download, open Roblox Studio, go into <code>PluginDebugService</code> and right click on your Plugin instance, and select \"Insert From File\".</p> <p>Select the <code>PluginEssentials.rbxm</code> file that you just downloaded, and if the <code>PluginEssentials</code> folder has appeared, congratulations, the installation is complete!</p>"},{"location":"tutorials/#plugin-components","title":"Plugin Components","text":"<p>The Plugin Components is a library that provides components made to create certain core aspects of plugins, such as Windows and ToolbarButtons. Using these components, you can easily build the foundation of your plugin.</p> <p>Using the navigation bar, you can find tutorials and examples of the components within this library.</p>"},{"location":"tutorials/#studio-components","title":"Studio Components","text":"<p>The Studio Components is a library that provides components made to replicate the built-in components of Roblox Studio, such as checkboxes, dropdowns, and more. These components provide a very similar experience to using Roblox Studio's built-in components, thus, users recognise these components and know how to use them.</p> <p>Using the navigation bar, you can find tutorials and examples of the components within this library.</p> <p>Info</p> <p>It is heavily recommended that you go through each tutorial page in order, to know the full extent of the features that Plugin Essentials provide.</p> <p>Info</p> <p>Studio Components was originally written by @sircfenner. And ported to Fusion by @YasuYoshida.</p>"},{"location":"tutorials/plugin-components/toolbarCreation/","title":"Toolbar Creation","text":"<p>A <code>Toolbar</code> is an object used to create <code>ToolbarButton</code>s. And a <code>ToolbarButton</code> is an object that allows the user to initiate a single, one-off action in Roblox Studio through the Click event.</p> <p>To configure our <code>Widget</code> from the Studio Ribbon, we must create a <code>Toolbar</code>, and buttons within that <code>Toolbar</code>. Fortunately, like <code>Widget</code>, there are components called <code>Toolbar</code> and <code>ToolbarButton</code> that allow you to do exactly this.</p> <p>Here's an example on how you can create a toolbar and a toolbar button:</p> <pre><code>local Fusion = require(someFolder.Fusion)\nlocal Scope = Fusion:scoped()\n\nlocal WidgetComponent = require(PluginEssentials.PluginComponents.Widget)\nlocal ToolbarComponent = require(PluginEssentials.PluginComponents.Toolbar)\nlocal ToolbarButtonComponent = require(PluginEssentials.PluginComponents.ToolbarButton)\n\nlocal Widget = WidgetComponent(Scope)\nlocal Toolbar = ToolbarComponent(Scope)\nlocal ToolbarButton = ToolbarButtonComponent(Scope)\n\nlocal pluginToolbar = Toolbar {\n    Name = \"Tools Toolbar\"\n}\n\nlocal enableButton = ToolbarButton {\n    Toolbar = pluginToolbar,\n\n    ClickableWhenViewportHidden = true,\n\n    Name = \"Tools\",\n    ToolTip = \"Show or hide the Tools window\",\n    Image = \"\",\n}\n</code></pre> <p>In the example above, we created a new toolbar called \"Tools Toolbar\" with the \"Tools\" button.</p> <p>Warning</p> <p>Creating a <code>Toolbar</code> in Studio with the Next Gen Ribbon enabled will do nothing as the behavior for it has not been implemented yet.</p>"},{"location":"tutorials/plugin-components/toolbarCreation/#configuring-a-widget-with-toolbar-buttons","title":"Configuring a Widget with Toolbar Buttons","text":"<p>Now that we have created our toolbar button, it is time to connect it to a <code>Widget</code>, so it can be used to enable or disable it.</p> <pre><code>local Fusion = require(someFolder.Fusion)\nlocal Scope = Fusion:scoped()\n\nlocal WidgetComponent = require(PluginEssentials.PluginComponents.Widget)\nlocal ToolbarComponent = require(PluginEssentials.PluginComponents.Toolbar)\nlocal ToolbarButtonComponent = require(PluginEssentials.PluginComponents.ToolbarButton)\n\nlocal Widget = WidgetComponent(Scope)\nlocal Toolbar = ToolbarComponent(Scope)\nlocal ToolbarButton = ToolbarButtonComponent(Scope)\n\nlocal widgetsEnabled = Scope:Value(false)\n\nlocal pluginToolbar = Toolbar {\n    Name = \"Tools Toolbar\"\n}\n\nlocal enableButton = ToolbarButton {\n    Toolbar = pluginToolbar,\n\n    ClickableWhenViewportHidden = true,\n\n    Name = \"Tools\",\n    ToolTip = \"Show or hide the Tools window\",\n    Image = \"\",\n\n    [OnEvent \"Click\"] = function()\n        widgetsEnabled:set(not Fusion.peek(widgetsEnabled))\n    end,\n}\n\nlocal newWidget = Widget {\n    Name = \"Tools\",\n\n    InitialDockTo = Enum.InitialDockState.Float,\n    InitialEnabled = false,\n    ForceInitialEnabled = false,\n    FloatingSize = Vector2.new(720, 710),\n    MinimumSize = Vector2.new(720, 710),\n\n    Enabled = widgetsEnabled,\n\n    [OnChange \"Enabled\"] = function(isEnabled)\n        widgetsEnabled:set(isEnabled)\n    end,\n}\n</code></pre> <p>In the example above, we created a toolbar, a toolbar button and a widget to display. We also created a value to check and set if the widget is enabled or not. Since Fusion is a state-based UI library, whenever the <code>widgetsEnabled</code> state changes, automatically the <code>Widget</code> will set its visibility depending on the value of the state.</p> <p>Success</p> <p>To create components easier, you can directly require and call a component with a <code>Scope</code>, like below. <pre><code>local Fusion = require(someFolder.Fusion)\nlocal Scope = Fusion:scoped()\n\n-- More efficient and easier to write!\nlocal Widget = require(PluginEssentials.PluginComponents.Widget)(Scope)\nlocal Toolbar = require(PluginEssentials.PluginComponents.Toolbar)(Scope)\nlocal ToolbarButton = require(PluginEssentials.PluginComponents.ToolbarButton)(Scope)\n</code></pre></p>"},{"location":"tutorials/plugin-components/widgetCreation/","title":"Widget Creation","text":"<p>A Widget is a <code>PluginGui</code> that displays its contents inside a dockable Roblox Studio window.</p> <p>The Plugin Components library make creating widgets very easy with the <code>Widget</code> component.</p> <p>Here's an example of a plugin widget:</p> <pre><code>local Fusion = require(someFolder.Fusion)\nlocal Scope = Fusion:scoped()\n\nlocal WidgetComponent = require(PluginEssentials.PluginComponents.Widget)\nlocal Widget = WidgetComponent(Scope)\n\nlocal newWidget = Widget {\n    Name = \"Tools\",\n    InitialDockTo = Enum.InitialDockState.Float,\n    InitialEnabled = false,\n    ForceInitialEnabled = false,\n    FloatingSize = Vector2.new(720, 710),\n    MinimumSize = Vector2.new(720, 710),\n}\n</code></pre> <p>To create a new basic widget, you use the <code>Widget()</code> function with the syntax in the above example. All components like <code>Widget</code> will accept a properties table that you can use to define properties or even children.</p> <p>With the introduction of <code>Scope</code>s in Fusion 0.3, all components must now be initialized with a <code>Scope</code> first, and then using the returned component function, you can create an instance of that component.</p> <p>Info</p> <p>It is recommended to use the same Scope for the same use-case components. Creating a new Scope after every component is strongly not recommended.</p>"},{"location":"tutorials/plugin-components/widgetCreation/#adding-children","title":"Adding Children","text":"<p>Like it has been mentioned above, you can add children to a <code>Widget</code>, or any other component. Components accept properties and children in the same way as normal Fusion objects do.</p> <pre><code>local Fusion = require(someFolder.Fusion)\nlocal Scope = Fusion:scoped()\n\nlocal WidgetComponent = require(PluginEssentials.PluginComponents.Widget)\nlocal BackgroundComponent = require(PluginEssentials.StudioComponents.Background)\n\nlocal Widget = WidgetComponent(Scope)\nlocal Background = BackgroundComponent(Scope)\n\nlocal newWidget = Widget {\n    Name = \"Tools\",\n    InitialDockTo = Enum.InitialDockState.Float,\n    InitialEnabled = false,\n    ForceInitialEnabled = false,\n    FloatingSize = Vector2.new(720, 710),\n    MinimumSize = Vector2.new(720, 710),\n\n    [Children] = {\n        Scope:New \"TextLabel\" {\n            Text = \"Hello!\",\n            TextScaled = true,\n            Position = UDim2.fromScale(0.5, 0.5),\n        },\n        Background {\n            [Children] = {\n                Scope:New \"TextLabel\" {\n                    Text = \"Goodbye!\",\n                    TextScaled = true,\n                    Position = UDim2.fromScale(0.5, 0.5),\n                },\n            }\n        }\n    }\n}\n</code></pre> <p>Like in the example above, all components can have a children table, and their children can be of Fusion objects.</p>"},{"location":"tutorials/studio-components/advancedComponents/","title":"Advanced Components","text":"<p>Here are the tutorials of all the components within the Studio Components library that are considered a little bit advanced over the others.</p>"},{"location":"tutorials/studio-components/advancedComponents/#checkbox","title":"Checkbox","text":"<p>This component creates an already stylized checkbox. This can be used to create a settings system.</p> <pre><code>local Checkbox = require(PluginEssentials.StudioComponents.Checkbox)(Scope)\n\nlocal newCheckbox = Checkbox {\n    Alignment = Enum.HorizontalAlignment.Left,\n    Text = \"Check me!\"\n    Value = false,\n\n    OnChange = function(newValue)\n        print(\"new value: \", newValue)\n    end,\n} -- Returns a Frame instance.\n</code></pre> <p>The checkbox component accepts any properties that a <code>Frame</code> instance can have.</p>"},{"location":"tutorials/studio-components/advancedComponents/#colorpicker","title":"ColorPicker","text":"<p>This component creates a color picker frame that allows the user to pick a color.</p> <pre><code>local ColorPicker = require(PluginEssentials.StudioComponents.ColorPicker)(Scope)\n\nlocal newColorPicker = ColorPicker {\n    ListDisplayMode = Enum.ListDisplayMode.Vertical,\n    OnChange = function(newColor)\n        print(\"Color:\", \"#\"..newColor:ToHex())\n    end,\n} -- Returns a Frame instance.\n</code></pre> <p>The color picker component accepts any properties that a <code>Frame</code> instance can have.</p>"},{"location":"tutorials/studio-components/advancedComponents/#loading","title":"Loading","text":"<p>This component plays a loading animation on the screen.</p> <pre><code>local Loading = require(PluginEssentials.StudioComponents.Loading)(Scope)\n\nlocal newLoading = Loading {\n    Enabled = true\n} -- Returns a Frame instance.\n</code></pre> <p>The loading component accepts any properties that a <code>Frame</code> instance can have.</p>"},{"location":"tutorials/studio-components/advancedComponents/#progressbar","title":"ProgressBar","text":"<p>This component displays a progress bar. </p> <pre><code>local ProgressBar = require(PluginEssentials.StudioComponents.ProgressBar)(Scope)\n\nlocal newProgressBar = ProgressBar {\n    Progress = 0.5 -- From 0 to 1\n} -- Returns a Frame instance.\n</code></pre> <p>The progress bar component accepts any properties that a <code>Frame</code> instance can have.</p>"},{"location":"tutorials/studio-components/advancedComponents/#slider","title":"Slider","text":"<p>This component creates a slider that the user can slide to interact with.</p> <pre><code>local Slider = require(PluginEssentials.StudioComponents.Slider)(Scope)\n\nlocal newSlider = Slider {\n    Value = 5, -- The current value the slider will be on by default.\n    Min = 1, -- The minimum value the slider can go to.\n    Max = 20, -- The maximum value the slider can go to.\n    Step = 1, -- How much the value will increase when slider moves.\n    Size = UDim2.new(0, 100, 0, 25), -- The size of the slider frame.\n    Position = UDim2.fromScale(0.2, 0.2), -- The position of the slider frame.\n\n    OnChange = function(newValue)\n        print(\"new value: \", newValue)\n    end,\n} -- Returns a Frame instance.\n</code></pre> <p>The slider component accepts any properties that a <code>Frame</code> instance can have.</p>"},{"location":"tutorials/studio-components/advancedComponents/#verticalcollapsiblesection","title":"VerticalCollapsibleSection","text":"<p>This component creates a section that is collapsible and expandable. It can be used as different option menus.</p> <pre><code>local VerticalCollapsibleSection = require(PluginEssentials.StudioComponents.VerticalCollapsibleSection)(Scope)\n\nlocal newVCS =  VerticalCollapsibleSection {\n    Text = \"Checkbox Components\",\n    [Children] = {\n        Checkbox {\n            Value = Scope:Value(nil),\n            Text = \"Indeterminate\"\n        },\n        Checkbox {\n            Text = \"Checked\",\n        },\n        Checkbox {\n            Text = \"Unchecked\",\n            Value = false\n        },\n        Checkbox {\n            Text = \"Checked Disabled\",\n            Value = true,\n            Enabled = Scope:Value(false),\n            OnChange = function(currentValue)\n                print(\"Toggled: \", currentValue)\n            end,\n        },\n        Checkbox {\n            Text = \"Disabled Unchecked\",\n            Enabled = false,\n            Value = false\n        },\n        Checkbox {\n            Text = \"Right Alignment\",\n            Alignment = Enum.HorizontalAlignment.Right,\n        },\n    }\n},-- Returns a Frame instance.\n</code></pre> <p>The vertical collapsible section component accepts any properties that a <code>Frame</code> instance can have, and special properties such as <code>Text</code>, <code>Padding</code> and <code>Collapsed</code>.</p>"},{"location":"tutorials/studio-components/advancedComponents/#verticalexpandinglist","title":"VerticalExpandingList","text":"<p>This component creates an expanding vertical component list.</p> <pre><code>local VerticalExpandingList = require(PluginEssentials.StudioComponents.VerticalExpandingList)(Scope)\n\nlocal newVEL =  VerticalExpandingList {\n    [Children] = {\n        Checkbox {\n            Value = Scope:Value(nil),\n            Text = \"Indeterminate\"\n        },\n        Checkbox {\n            Text = \"Checked\",\n        },\n        Checkbox {\n            Text = \"Unchecked\",\n            Value = false\n        },\n        Checkbox {\n            Text = \"Checked Disabled\",\n            Value = true,\n            Enabled = Scope:Value(false),\n            OnChange = function(currentValue)\n                print(\"Toggled: \", currentValue)\n            end,\n        },\n        Checkbox {\n            Text = \"Disabled Unchecked\",\n            Enabled = false,\n            Value = false\n        },\n        Checkbox {\n            Text = \"Right Alignment\",\n            Alignment = Enum.HorizontalAlignment.Right,\n        },\n    }\n},-- Returns a Frame instance.\n</code></pre> <p>The vertical expanding list component accepts any properties that a <code>Frame</code> instance can have, and special properties such as <code>Padding</code> and <code>AutomaticSize</code>.</p>"},{"location":"tutorials/studio-components/basicComponents/","title":"Basic Components","text":"<p>The Studio Components library provides many useful components to make your plugin development experience easier. Here are tutorials on how you can use certain basic ones.</p>"},{"location":"tutorials/studio-components/basicComponents/#background","title":"Background","text":"<p>This component will create an already stylized background frame. Like other components, you can configure its properties to change it to whatever you like.</p> <pre><code>local Background = require(PluginEssentials.StudioComponents.Background)(Scope)\n\nlocal newBackground = Background {\n    Name = \"Menu\",\n    ClipsDescendants = false,\n    Size = UDim2.new(0, 50, 0, 50),\n} -- Returns a Frame instance.\n</code></pre> <p>The Background component accepts any properties that a <code>Frame</code> instance can have.</p>"},{"location":"tutorials/studio-components/basicComponents/#shadow","title":"Shadow","text":"<p>This component creates a shadow image. It can be used to create shadows for your other components, or objects.</p> <pre><code>local Shadow = require(PluginEssentials.StudioComponents.Shadow)(Scope)\n\nlocal newShadow = Shadow {\n    Side = \"right\"  -- Can be: \"right\", \"left\", \"bottom\", \"top\"\n} -- Returns an ImageLabel instance.\n</code></pre> <p>The Shadow component will not accept any properties other than <code>Side</code>, <code>Transparency</code>, and <code>LayoutOrder</code>.</p>"},{"location":"tutorials/studio-components/basicComponents/#boxborder","title":"BoxBorder","text":"<p>This component creates a box border around your UI objects. It can be used around buttons, or to make checkboxes.</p> <pre><code>local BoxBorder = require(PluginEssentials.StudioComponents.BoxBorder)(Scope)\n\nlocal newBoxBorder = BoxBorder {\n    Color = Color3.fromRGB(255, 255, 255), -- If not set, it will automatically be determined depending on your Studio theme.\n    Thickness = 1,\n    CornerRadius = UDim.new(0, 2),\n\n    [Children] = {\n        Scope:New \"Frame\" { -- The border will be created around this Frame\n            Size = UDim2.new(0, 50, 0, 50)\n        }\n    } \n} \n</code></pre> <p>The BoxBorder component will not accept any properties other than <code>Color</code>, <code>Thickness</code>, and <code>CornerRadius</code>. If the <code>Color</code> property is not given, then the color will be determined based on your Studio theme. It will also automatically update when the theme is changed, so it is recommended to not set this property.</p>"},{"location":"tutorials/studio-components/basicComponents/#classicon","title":"ClassIcon","text":"<p>This component allows you to easily create an image with the icon of the given class name.</p> <pre><code>local ClassIcon = require(PluginEssentials.StudioComponents.ClassIcon)(Scope)\n\nlocal newClassIcon = ClassIcon {\n    ClassName = \"Part\"\n} -- Returns an ImageLabel instance.\n</code></pre> <p>The ClassIcon component will not accept any properties other than <code>ClassName</code>.</p>"},{"location":"tutorials/studio-components/basicComponents/#scrollframe","title":"ScrollFrame","text":"<p>This component allows you to easily create a scrolling frame. Special properties such as <code>UILayout</code> and <code>UIPadding</code> allows you to control the layout and the padding between the object within the scrolling frame.</p> <pre><code>local ScrollFrame = require(PluginEssentials.StudioComponents.ScrollFrame)(Scope)\n\nlocal newScrollFrame = ScrollFrame {\n    UILayout = Scope:New \"UIListLayout\" {},\n    UIPadding = Scope:New \"UIPadding\" {},\n    CanvasScaleConstraint = Enum.ScrollingDirection.X,\n} -- Returns a Frame instance.\n</code></pre> <p>This component will accept any properties that a <code>ScrollingFrame</code> instance can have.</p>"},{"location":"tutorials/studio-components/basicComponents/#label","title":"Label","text":"<p>This component allows you to create a text label.</p> <pre><code>local Label = require(PluginEssentials.StudioComponents.Label)(Scope)\n\nlocal newLabel = Label {\n    Text = \"Hello!\",\n    TextSize = 24,\n    TextColor3 = Color3.fromRGB(255, 255, 255),\n    TextColorStyle = Enum.StudioStyleGuideColor.MainText, -- Allows you to change the color of the text without having to modify the TextColor3 property. This property is recommended to use if you want to modify the color.\n    Enabled = true,\n} -- Returns a TextLabel instance.\n</code></pre> <p>This component will accept any properties that a <code>TextLabel</code> instance can have.</p> <p>The <code>TextColor3</code> property here is set to white as an example, and is not recommended to use in production. This is due to the fact that all components update their colors depending on the Studio's theme. Setting this property overwrites this system, and thus when the user updates their Studio's theme, the color will not be updated. If you still want to update the color however, you should use the <code>TextColorStyle</code> property instead.</p>"},{"location":"tutorials/studio-components/basicComponents/#title","title":"Title","text":"<p>This component allows you to create a big text label, meant for titles and text that is supposed to appear big.</p> <pre><code>local Title = require(PluginEssentials.StudioComponents.Title)(Scope)\n\nlocal newTitle = Title {\n    Text = \"Hello!\",\n    TextSize = 24,\n    TextColor3 = Color3.fromRGB(255, 255, 255),\n    TextColorStyle = Enum.StudioStyleGuideColor.MainText, -- Allows you to change the color of the text without having to modify the TextColor3 property. This property is recommended to use if you want to modify the color.\n    Enabled = true,\n} -- Returns a TextLabel instance.\n</code></pre> <p>This component will accept any properties that a <code>TextLabel</code> instance can have.</p> <p>Like the <code>Label</code>, the <code>TextColor3</code> property is not recommended to be used.</p> <p>Info</p> <p>All given properties can also be states due to Fusion. This allows you to create reactive components that have properties that will immediately update whenever a change occurs to that state's value.</p>"},{"location":"tutorials/studio-components/buttons/","title":"Button Components","text":"<p>Here are the tutorials of all the button components within the Studio Components library.</p>"},{"location":"tutorials/studio-components/buttons/#button","title":"Button","text":"<p>This component allows you to create an already stylized button.</p> <pre><code>local Button = require(PluginEssentials.StudioComponents.Button)(Scope)\n\nlocal newButton = Button {\n    BackgroundColorStyle = Enum.StudioStyleGuideColor.Default,\n    BorderColorStyle = Enum.StudioStyleGuideColor.Default,\n\n    Text = \"Hello!\",\n    TextSize = 24,\n    TextColorStyle = Enum.StudioStyleGuideColor.Default,\n\n    Enabled = true,\n\n    Activated = function()\n        print(\"Activated!\")\n    end,\n} -- Returns a TextButton instance.\n</code></pre> <p>This component will accept any properties that a <code>TextButton</code> instance can have. <code>...ColorStyle</code> properties allow you to change the color of certain parts of the button without having to directly modify the <code>TextColor3</code> property. This ensures the colors get dynamically updated if the Studio theme ever changes.</p>"},{"location":"tutorials/studio-components/buttons/#iconbutton","title":"IconButton","text":"<p>This component allows you to create a button with only an icon.</p> <pre><code>local IconButton = require(PluginEssentials.StudioComponents.IconButton)(Scope)\n\nlocal newIconButton = IconButton {\n    BackgroundColorStyle = Enum.StudioStyleGuideColor.Default,\n    BorderColorStyle = Enum.StudioStyleGuideColor.Default,\n\n    Icon = \"\",\n    Enabled = true,\n\n    Activated = function()\n        print(\"Activated!\")\n    end,\n} -- Returns a TextButton instance.\n</code></pre> <p>This component will accept any properties that a <code>TextButton</code> instance can have.</p>"},{"location":"tutorials/studio-components/buttons/#mainbutton","title":"MainButton","text":"<p>This component allows you to create a Button component with certain properties already set. This component can be used for dialog options.</p> <pre><code>local MainButton = require(PluginEssentials.StudioComponents.MainButton)(Scope)\n\nlocal newMainButton = MainButton {\n    Text = \"MainButton\",\n\n    Activated = function()\n        print(\"Activated!\")\n    end,\n} -- Returns a TextButton instance.\n</code></pre> <p>This component will accept any properties that a <code>TextButton</code> instance can have.</p>"},{"location":"tutorials/studio-components/inputs/","title":"Input Components","text":"<p>Here are the tutorials of all the input components within the Studio Components library.</p>"},{"location":"tutorials/studio-components/inputs/#textinput","title":"TextInput","text":"<p>This component allows you to get input from the user.</p> <pre><code>local TextInput = require(PluginEssentials.StudioComponents.TextInput)(Scope)\n\nlocal newTextInput = TextInput {\n    PlaceholderText = \"Write something here!\",\n    Enabled = true,\n\n    OnChange = function(newText)\n        print(\"new text: \", newText)\n    end,\n} -- Returns a TextBox instance.\n</code></pre> <p>This component will accept any properties that a <code>TextBox</code> instance can have.</p>"},{"location":"tutorials/studio-components/inputs/#limitedtextinput","title":"LimitedTextInput","text":"<p>This component allows you to get input from the user, but there can be set limitations.</p> <pre><code>local LimitedTextInput = require(PluginEssentials.StudioComponents.LimitedTextInput)(Scope)\n\nlocal newLimitedTextInput = LimitedTextInput {\n    PlaceholderText = \"Write something here!\",\n    Enabled = true,\n    TextLimit = 15,\n    GraphemeLimit = 15,\n\n    OnChange = function(newText)\n        print(\"new text: \", newText)\n    end,\n} -- Returns a TextBox instance.\n</code></pre> <p>This component will accept any properties that a <code>TextBox</code> instance can have. The text entered inside this component will not exceed the set limits. This can be used to limit the amount of words/letters a user can enter.</p>"}]}